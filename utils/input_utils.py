"""utils/input_utils.py
Fonctions utilitaires pour la saisie utilisateur.
R√¥le :
  - G√©rer les saisies utilisateur avec validation
  - Fournir des fonctions pour des saisies sp√©cifiques (non vide, date)
"""

from datetime import datetime
from views.display_message import DisplayMessage

# Nombre maximum de tentatives pour une saisie utilisateur
MAX_ATTEMPTS = 3


class InputUtils:
    """
    Classe utilitaire pour les saisies utilisateur.
    R√¥le :
      - Fournit des m√©thodes statiques pour g√©rer les saisies utilisateur
      - G√®re les erreurs et les validations de saisie
    """

    # -----------------------
    #   SAISIE NON VIDE
    # -----------------------

    @staticmethod
    def input_nonempty(prompt):
        """
        Demande une saisie non vide √† l'utilisateur¬∑rice.
        √âtapes :
        1. Affiche un message (prompt) pour demander une saisie
        2. V√©rifie que la saisie n'est pas vide
        3. R√©essaie jusqu'√† MAX_ATTEMPTS
        4. Retourne la valeur saisie ou None si √©chec
        """
        # 1Ô∏è‚É£ Initialisation du compteur de tentatives
        attempt = 0

        # 2Ô∏è‚É£ Boucle : r√©p√®te la demande jusqu'√† atteindre MAX_ATTEMPTS
        while attempt < MAX_ATTEMPTS:
            # üÖ∞ Affiche le prompt et r√©cup√®re la saisie utilisateur (supprime espaces inutiles)
            value = input(prompt).strip()

            # üÖ± Si l'utilisateur a saisi une valeur non vide, on la retourne imm√©diatement
            if value:
                return value

            # üÖ≤ Sinon, incr√©mente le compteur et affiche un message d'erreur
            attempt += 1
            DisplayMessage.display_input_nonempty(attempt)

        # 3Ô∏è‚É£ Si le nombre maximum de tentatives est atteint, on abandonne
        DisplayMessage.display_abort_operation()
        # üÖ∞ Retourne None pour indiquer l'√©chec
        return None

    # -----------------------
    #   SAISIE ET VALIDATION D'UNE DATE
    # -----------------------

    @staticmethod
    def input_date(prompt_text):
        """
        Demande une date √† l'utilisateur¬∑rice au format jj/mm/aaaa.
        √âtapes :
        1. Affiche un message (prompt) pour demander une date
        2. V√©rifie que la saisie respecte le format jj/mm/aaaa
        3. R√©essaie jusqu'√† MAX_ATTEMPTS si la saisie est incorrecte
        4. Retourne la date saisie ou None si √©chec
        """
        # 1Ô∏è‚É£ Initialisation du compteur de tentatives
        attempt = 0

        # 2Ô∏è‚É£ Boucle : r√©p√®te la demande jusqu'√† atteindre MAX_ATTEMPTS
        while attempt < MAX_ATTEMPTS:
            # üÖ∞ Affiche le prompt et r√©cup√®re la saisie utilisateur (supprime espaces inutiles)
            date_str = input(prompt_text).strip()
            try:
                # üÖ± Tente de convertir la saisie au format jj/mm/aaaa
                datetime.strptime(date_str, "%d/%m/%Y")
                # üÖ≤ Si la conversion r√©ussit, retourne imm√©diatement la date saisie
                return date_str
            except ValueError:
                # üÖ≥ Sinon, incr√©mente le compteur et affiche un message d'erreur
                attempt += 1
                DisplayMessage.display_input_date(attempt)

        # 3Ô∏è‚É£ Si le nombre maximum de tentatives est atteint, on abandonne
        DisplayMessage.display_abort_operation()
        # üÖ∞ Retourne None pour indiquer l'√©chec
        return None
