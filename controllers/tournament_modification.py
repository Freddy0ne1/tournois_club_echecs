"""
Module tournament_modification
Ce module g√®re les fonctionnalit√©s de modification des tournois.
"""

from datetime import datetime
from .tournament_controller_base import TournamentController as BaseTournamentController


class TournamentController(BaseTournamentController):
    """
    Sous-contr√¥leur sp√©cialis√© dans la modification des informations
    d'un tournoi existant (h√©rite de BaseTournamentController).
    """

    # -----------------------
    #   MODIFICATION TOURNOI
    # -----------------------

    # ------- Modification des informations d'un tournoi existant -------
    def modify_tournament(self):
        """
        Modifie les informations d'un tournoi existant en utilisant des m√©thodes d√©di√©es :
        1. S√©lectionne le tournoi √† modifier
        2. Affiche ses informations actuelles
        3. Met √† jour chaque champ (nom, lieu, dates, description, rounds)
        4. Sauvegarde et confirme la mise √† jour
        """
        # 1Ô∏è‚É£ Affiche le titre pour signaler l'entr√©e en mode modification
        print("\n--- Modification d'un tournoi ---")

        # 2Ô∏è‚É£ S√©lection du tournoi √† modifier via un menu
        tournament = self._choose("modifier")
        if not tournament:  # üÖ∞ Annulation si aucun tournoi n'est s√©lectionn√©
            return

        # 3Ô∏è‚É£ Affiche les informations actuelles pour donner un contexte
        self._display_tournament_info(tournament)

        # 4Ô∏è‚É£ Modification des champs un par un, en utilisant les m√©thodes utilitaires

        # üÖ∞ Nom du tournoi (vide = conserve l'ancien)
        tournament.name = self._edit_text_field("Nom", tournament.name)

        # üÖ± Lieu du tournoi
        tournament.place = self._edit_text_field("Lieu", tournament.place)

        # üÖ≤ Date de d√©but (avec v√©rification du format jj/mm/aaaa)
        tournament.start_date = self._edit_date_field(
            "Date d√©but", tournament.start_date
        )

        # üÖ≥ Date de fin (v√©rification du format + coh√©rence >= date d√©but)
        tournament.end_date = self._edit_date_field(
            "Date fin", tournament.end_date, tournament.start_date
        )

        # üÖ¥ Description du tournoi
        tournament.description = self._edit_text_field(
            "Description", tournament.description
        )

        # üÖµ Nombre de tours (entier positif ou garde la valeur existante)
        tournament.total_rounds = self._edit_rounds(tournament.total_rounds)

        # 5Ô∏è‚É£ Sauvegarde du tournoi modifi√© et affichage d'un r√©sum√©
        self._confirm_and_save(tournament)

    # ------- Affichage des informations actuelles d'un tournoi -------
    def _display_tournament_info(self, tournament):
        """
        Affiche les informations actuelles d'un tournoi :
        - Nom, lieu, dates, description et nombre de tours.
        - Indique que laisser un champ vide conserve la valeur actuelle.
        """
        # 1Ô∏è‚É£ Affiche le titre avec le nom du tournoi
        print(f"\n--- Infos actuelles du tournoi '{tournament.name}' ---")

        # 2Ô∏è‚É£ Affiche les d√©tails principaux du tournoi
        print(f"Lieu             : {tournament.place}")
        print(f"Dates            : {tournament.start_date} ‚Üí {tournament.end_date}")
        print(f"Description      : {tournament.description}")
        print(f"Nombre de tours  : {tournament.total_rounds}")

        # 3Ô∏è‚É£ Rappel pour l'utilisateur : un champ vide garde l'ancienne valeur
        print("\n‚ÑπÔ∏è  Laisser vide pour conserver la valeur actuelle.\n")

    # ------- √âdition d‚Äôun champ texte avec valeur actuelle propos√©e -------
    def _edit_text_field(self, label, current):
        """
        Demande une nouvelle valeur pour un champ texte.
        - Affiche la valeur actuelle entre crochets.
        - Si l'utilisateur saisit une valeur, elle est retourn√©e.
        - Si l'utilisateur laisse vide, on conserve la valeur actuelle.
        """
        # 1Ô∏è‚É£ Demande une saisie en affichant la valeur actuelle
        new = input(f"{label} [{current}] : ").strip()

        # 2Ô∏è‚É£ Retourne la nouvelle valeur si saisie, sinon garde l'ancienne
        return new if new else current

    # ------- √âdition d‚Äôune date avec validation du format et coh√©rence -------
    def _edit_date_field(self, label, current, min_date=None):
        """
        Demande une nouvelle date (format jj/mm/aaaa) pour un champ.
        - Si l'utilisateur laisse vide, conserve la date actuelle.
        - Valide le format et, si min_date est fourni, v√©rifie que la nouvelle date
        est post√©rieure ou √©gale √† cette min_date.
        """
        # 1Ô∏è‚É£ Boucle jusqu'√† obtenir une saisie correcte ou conserver la valeur existante
        while True:
            # üÖ∞ Demande la saisie en affichant la valeur actuelle
            new = input(f"{label} [{current}] : ").strip()

            # üÖ± Si aucune saisie ‚Üí on garde la valeur actuelle
            if not new:
                return current

            try:
                # 2Ô∏è‚É£ Conversion de la saisie en objet date pour validation
                date_val = datetime.strptime(new, "%d/%m/%Y")

                # 3Ô∏è‚É£ Si une min_date est fournie, on v√©rifie la coh√©rence
                if min_date:
                    min_val = datetime.strptime(min_date, "%d/%m/%Y")
                    if date_val < min_val:
                        print("‚ùå La date doit √™tre ‚â• √† la date de d√©but.")
                        continue  # Redemande la saisie

                # 4Ô∏è‚É£ Retourne la nouvelle date valide
                return new

            except ValueError:
                # 5Ô∏è‚É£ En cas de format invalide, affiche un exemple et recommence
                print("‚ùå Format invalide. Exemple : 31/12/2025")

    # ------- √âdition du nombre de tours avec validation -------
    def _edit_rounds(self, current):
        """
        Demande un nouveau nombre de tours pour un tournoi.
        - Affiche la valeur actuelle et permet de la conserver si aucune saisie.
        - Valide que la saisie est un entier positif.
        """
        # 1Ô∏è‚É£ Boucle jusqu'√† obtenir une saisie correcte ou conserver la valeur actuelle
        while True:
            # üÖ∞ Demande une saisie en affichant le nombre actuel
            nb = input(f"Nombre de tours [{current}] : ").strip()

            # 2Ô∏è‚É£ Si aucune saisie ‚Üí conserve la valeur actuelle
            if nb == "":
                return current

            # 3Ô∏è‚É£ V√©rifie que la saisie est un entier positif
            if nb.isdigit() and int(nb) > 0:
                return int(nb)

            # 4Ô∏è‚É£ Message d'erreur si la saisie est invalide et relance la demande
            print("Entrez un entier positif ou laissez vide pour conserver.")

    # ------- Sauvegarde et confirmation apr√®s cr√©ation -------
    def _confirm_and_save(self, tournament):
        """
        Sauvegarde un tournoi apr√®s modification et affiche un r√©capitulatif.
        √âtapes :
        1. Sauvegarde des donn√©es mises √† jour
        2. Affiche une confirmation visuelle
        3. Montre toutes les informations actuelles du tournoi
        """
        # 1Ô∏è‚É£ Sauvegarde du tournoi mis √† jour
        self._save(tournament)

        # 2Ô∏è‚É£ Message de confirmation
        print("\n‚úÖ Mise √† jour effectu√©e.\n")

        # 3Ô∏è‚É£ Affiche les informations actualis√©es du tournoi
        print(f"--- Nouvelles infos du tournoi '{tournament.name}' ---\n")
        print(f"Lieu             : {tournament.place}")
        print(f"Dates            : {tournament.start_date} ‚Üí {tournament.end_date}")
        print(f"Description      : {tournament.description}")
        print(f"Nombre de tours  : {tournament.total_rounds}")
