"""controllers/player_controller.py
Contr√¥leur pour g√©rer les joueurs.
"""

import re
from datetime import datetime
from views.display_message import DisplayMessage
from views.console_view import ConsoleView
from models.player import Player
from utils.input_utils import InputUtils, MAX_ATTEMPTS


# -----------------------
#   CONTROLEUR JOUEURS
# -----------------------


class PlayerController:
    """
    Contr√¥leur pour la gestion des joueurs.
    Responsabilit√©s :
      - Cr√©er de nouveaux joueurs
      - Modifier les informations existantes
      - Supprimer un joueur
      - Lister tous les joueurs
      - Rechercher un joueur sp√©cifique
    """

    # Les m√©thodes impl√©ment√©es dans cette classe couvriront :
    #   - create_player() : cr√©ation d'un joueur
    #   - modify_player() : modification d'un joueur existant
    #   - delete_player() : suppression d'un joueur
    #   - list_players()  : affichage de tous les joueurs
    #   - search_player() : recherche d'un joueur par ID, nom, etc.

    # -----------------------
    #   TRI ALPHAB√âTIQUE DES JOUEURS
    # -----------------------

    def _get_sorted_players(self):
        """
        Retourne une nouvelle liste des joueurs (Player.registry) tri√©e par nom puis pr√©nom.
        √âtapes :
        1. R√©cup√®re la liste globale des joueurs depuis Player.registry
        2. Trie la liste par nom (last_name) puis par pr√©nom (first_name)
        3. Retourne la liste tri√©e (sans modifier Player.registry)
        """
        # 1Ô∏è‚É£ Acc√®de √† la liste des joueurs enregistr√©s (Player.registry)
        # 2Ô∏è‚É£ Utilise sorted() pour g√©n√©rer une liste tri√©e
        #    - key=lambda p: (p.last_name, p.first_name) : tri alphab√©tique
        #      en priorit√© sur le nom, puis sur le pr√©nom
        # 3Ô∏è‚É£ Retourne la nouvelle liste tri√©e
        return sorted(Player.registry, key=lambda p: (p.last_name, p.first_name))

    # -----------------------
    #   S√âLECTION D'UN JOUEUR
    # -----------------------

    def _choose_player(self, action):
        """
        Affiche la liste des joueurs et demande √† l'utilisateur d'en choisir un
        pour r√©aliser une action donn√©e (modifier, supprimer, etc.).
        Param√®tre :
        - action : texte affich√© pour indiquer l'action (ex. "modifier")
        Retour :
        - L'objet Player s√©lectionn√© ou None si saisie invalide ou annulation
        √âtapes :
        1. R√©cup√®re la liste tri√©e des joueurs
        2. V√©rifie si la liste est vide
        3. Affiche la liste des joueurs avec un num√©ro
        4. Demande √† l'utilisateur d'entrer un num√©ro
        5. V√©rifie que la saisie est un nombre
        6. V√©rifie que l'index saisi est valide
        7. Retourne le joueur s√©lectionn√© ou None
        """
        # 1Ô∏è‚É£ R√©cup√®re la liste tri√©e des joueurs (par nom puis pr√©nom)
        players = self._get_sorted_players()

        # 2Ô∏è‚É£ Si la liste est vide, affiche un message et retourne None
        if not players:
            DisplayMessage.display_not_player()
            return None

        # 3Ô∏è‚É£ Affiche les joueurs num√©rot√©s gr√¢ce √† la ConsoleView
        ConsoleView.show_players(players)

        # 4Ô∏è‚É£ Invite l'utilisateur √† entrer le num√©ro du joueur
        choice = input(f"\nNum√©ro du joueur √† {action} : ").strip()

        # 5Ô∏è‚É£ V√©rifie que la saisie est un nombre valide
        if not choice.isdigit():
            DisplayMessage.display_not_isdigit()
            return None

        # 6Ô∏è‚É£ Convertit la saisie en entier et v√©rifie si l'index est dans la plage
        idx = int(choice)
        if 1 <= idx <= len(players):
            # 7Ô∏è‚É£ Si valide, retourne le joueur correspondant
            return players[idx - 1]

        # 8Ô∏è‚É£ Sinon, avertit que le num√©ro est hors plage et retourne None
        DisplayMessage.display_out_of_range()
        return None

    # -----------------------
    #   CREATION JOUEUR
    # -----------------------

    # ------- Questions pour cr√©er un nouveau joueur -------
    def create_player(self):
        """
        Cr√©e un nouveau joueur en posant une s√©rie de questions √† l'utilisateur¬∑rice.
        √âtapes :
        1. Affiche un en-t√™te
        2. Demande un identifiant national unique et valide
        3. Demande le nom (transform√© en majuscules)
        4. Demande le pr√©nom (capitalis√©)
        5. Demande et valide la date de naissance (format jj/mm/aaaa)
        6. Cr√©e le joueur et sauvegarde le registre
        7. Affiche un r√©capitulatif des informations saisies
        """
        # 1Ô∏è‚É£ Affiche un titre pour indiquer la cr√©ation d'un joueur
        DisplayMessage.display_create_title()

        # 2Ô∏è‚É£ Demande l'identifiant national unique
        national_id = self._ask_unique_national_id()
        if not national_id:  # üÖ∞ Abandon si aucun identifiant valide n'a √©t√© saisi
            return

        # 3Ô∏è‚É£ Demande et formate le nom en majuscules
        last_name = self._ask_name("Nom du joueur : ", upper=True)
        if not last_name:
            return

        # 4Ô∏è‚É£ Demande et formate le pr√©nom (1re lettre en majuscule)
        first_name = self._ask_name("Pr√©nom : ", capitalize=True)
        if not first_name:
            return

        # 5Ô∏è‚É£ Demande la date de naissance et v√©rifie son format
        birth_date = InputUtils.input_date("Date de naissance (jj/mm/aaaa) : ")
        if birth_date is None:
            return

        # 6Ô∏è‚É£ Cr√©e le joueur et sauvegarde le registre
        new_player = Player(last_name, first_name, birth_date, national_id)
        Player.save_all()

        # 7Ô∏è‚É£ Affiche les informations du joueur nouvellement cr√©√©
        self._display_new_player(new_player)

    # ------- V√©rification et saisie d'un identifiant national unique -------
    def _ask_unique_national_id(self):
        """
        Demande un identifiant national unique et valide au format 'AB12345'.
        √âtapes :
        1. Autorise MAX_ATTEMPTS tentatives
        2. V√©rifie que la saisie n'est pas vide
        3. V√©rifie le format (AB + 5 chiffres)
        4. V√©rifie que l'identifiant n'existe pas d√©j√†
        5. Retourne l'ID valid√© ou None si √©chec
        """
        # 1Ô∏è‚É£ Boucle sur un nombre limit√© de tentatives
        for attempt in range(1, MAX_ATTEMPTS + 1):

            # üÖ∞ Demande une saisie obligatoire (non vide)
            national_id = InputUtils.input_nonempty(
                "Identifiant national (AB+5 chiffres) : "
            )
            # üÖ± Si l'utilisateur abandonne, on quitte imm√©diatement
            if national_id is None:
                return None

            # üÖ≤ Mise en majuscules pour uniformiser
            national_id = national_id.upper()

            # 2Ô∏è‚É£ V√©rification du format attendu : "AB" + 5 chiffres
            if not re.match(r"AB\d{5}$", national_id):
                DisplayMessage.display_not_re_match(attempt, MAX_ATTEMPTS)
                continue

            # 3Ô∏è‚É£ V√©rification que cet identifiant n'existe pas d√©j√† dans le registre
            if any(p.national_id == national_id for p in Player.registry):
                DisplayMessage.display_already_exists(attempt, MAX_ATTEMPTS)
                continue

            # 4Ô∏è‚É£ Si format et unicit√© sont valides, on retourne l'ID
            return national_id

        # 5Ô∏è‚É£ Si toutes les tentatives ont √©chou√©
        DisplayMessage.display_abort_operation()
        return None

    # ------- Demande et formatage du nom ou pr√©nom d'un joueur -------
    def _ask_name(self, prompt, upper=False, capitalize=False):
        """
        Demande un nom ou un pr√©nom √† l'utilisateur¬∑rice.
        √âtapes :
        1. Utilise _input_nonempty pour garantir une saisie non vide
        2. Applique un formatage selon les options :
            - upper=True      ‚Üí met tout en majuscules
            - capitalize=True ‚Üí met la premi√®re lettre en majuscule
        3. Retourne la valeur format√©e ou None si abandon
        """
        # 1Ô∏è‚É£ Demande une saisie obligatoire
        name = InputUtils.input_nonempty(prompt)

        # 2Ô∏è‚É£ Si l'utilisateur abandonne, on retourne None
        if name is None:
            return None

        # 3Ô∏è‚É£ Application √©ventuelle du formatage
        if upper:  # üÖ∞ Tout en majuscules
            return name.upper()
        if capitalize:  # üÖ± Premi√®re lettre en majuscule
            return name.capitalize()

        # 4Ô∏è‚É£ Sinon, retourne la valeur brute
        return name

    # ------- Affichage de confirmation et d√©tails d'un nouveau joueur -------
    def _display_new_player(self, player):
        """
        Affiche un message de confirmation et les informations du joueur cr√©√©.
        √âtapes :
        1. Affiche un message de succ√®s
        2. Affiche un en-t√™te contenant le nom et le pr√©nom
        3. Affiche les d√©tails : date de naissance et identifiant national
        """
        # 1Ô∏è‚É£ Affiche un message confirmant la cr√©ation du joueur
        DisplayMessage.display_player_created()

        # 2Ô∏è‚É£ Affiche un titre clair avec le nom et le pr√©nom du joueur
        DisplayMessage.display_player_info_title()

        # 3Ô∏è‚É£ Affiche les informations d√©taill√©es
        DisplayMessage.display_player_info(player)

    # -----------------------
    #   MODIFICATION JOUEUR
    # -----------------------

    # ------- Modification des informations d'un joueur existant -------
    def modify_player(self):
        """
        Modifie les informations d'un joueur existant.
        √âtapes :
        1. Affiche un en-t√™te clair
        2. Demande de s√©lectionner un joueur existant
        3. Affiche les informations actuelles du joueur
        4. Permet de modifier ses champs (nom, pr√©nom, date de naissance)
        5. Sauvegarde les modifications
        6. Confirme la mise √† jour et affiche un r√©capitulatif
        7. Retourne le joueur mis √† jour
        """
        # 1Ô∏è‚É£ Affiche un titre pour indiquer qu'on entre en mode modification
        DisplayMessage.display_update_player_title()

        # 2Ô∏è‚É£ Demande √† l'utilisateur de choisir le joueur √† modifier
        player = self._choose_player("modifier")
        if not player:
            return None  # üÖ∞ Annule si aucun joueur n'est s√©lectionn√©

        # 3Ô∏è‚É£ Affiche les informations actuelles pour donner le contexte
        self._display_player_info(player, "actuelles")

        # 4Ô∏è‚É£ Mise √† jour des champs du joueur (cette m√©thode renvoie False si annulartion)
        success = self._update_player_fields(player)
        if not success:  # üÖ± Si l'utilisateur abandonne la modification
            DisplayMessage.display_player_not_updated()
            return None  # Abandonne la modification

        # 5Ô∏è‚É£ Sauvegarde les changements dans le registre (players.json)
        Player.save_all()

        # 6Ô∏è‚É£ Confirmation et affichage des nouvelles informations
        self._confirm_player_update(player)

        # 7Ô∏è‚É£ Retourne le joueur modifi√©
        return player

    # ------- Affichage des informations d'un joueur (actuelles ou mises √† jour) -------
    def _display_player_info(self, player, label="actuelles"):
        """
        Affiche les informations d'un joueur.
        √âtapes :
        1. Affiche un titre contextuel (ex. infos actuelles ou nouvelles)
        2. Affiche les d√©tails du joueur : identifiant et date de naissance
        3. Si label vaut "actuelles", ajoute une note expliquant que laisser
            un champ vide permet de conserver la valeur existante
        """
        # 1Ô∏è‚É£ Affiche un titre contextualis√© (actuelles ou nouvelles infos)
        DisplayMessage.display_current_player_info(label)

        # 2Ô∏è‚É£ Affiche les informations principales
        DisplayMessage.display_player_info_details(player)

        # 3Ô∏è‚É£ Si on affiche les infos actuelles, ajoute une note explicative
        if label == "actuelles":
            DisplayMessage.display_consigne()

    # ------- Mise √† jour des champs d'un joueur existant (nom, pr√©nom, date de naissance) -------
    def _update_player_fields(self, player):
        """
        Demande et met √† jour les informations d'un joueur existant.
        Retourne True si une modification a √©t√© effectu√©e, sinon False.
        """
        updated = False  # ‚úÖ Suivi des modifications

        # 1Ô∏è‚É£ Identifiant national
        for attempt in range(1, MAX_ATTEMPTS + 1):
            value = input(f"Identifiant national [{player.national_id}] : ").strip()
            if value == "":
                break  # ‚ûú Conserver l'ancien
            value = value.upper()
            if not re.match(r"AB\d{5}$", value):
                DisplayMessage.display_not_re_match(attempt, MAX_ATTEMPTS)
                continue
            if any(p.national_id == value and p != player for p in Player.registry):
                DisplayMessage.display_already_exists(attempt, MAX_ATTEMPTS)
                continue
            if value != player.national_id:
                player.national_id = value
                updated = True
            break
        else:
            DisplayMessage.display_abort_operation()
            return False

        # 2Ô∏è‚É£ Nom
        value = input(f"Nom [{player.last_name}] : ").strip()
        if value and value.upper() != player.last_name:
            player.last_name = value.upper()
            updated = True

        # 3Ô∏è‚É£ Pr√©nom
        value = input(f"Pr√©nom [{player.first_name}] : ").strip()
        if value and value.capitalize() != player.first_name:
            player.first_name = value.capitalize()
            updated = True

        # 4Ô∏è‚É£ Date de naissance
        value = input(f"Date de naissance [{player.birth_date}] : ").strip()
        if value:
            try:
                datetime.strptime(value, "%d/%m/%Y")
                if value != player.birth_date:
                    player.birth_date = value
                    updated = True
            except ValueError:
                DisplayMessage.display_error_format_date()

        return updated

    # ------- Confirmation et affichage des informations mises √† jour d'un joueur -------
    def _confirm_player_update(self, player):
        """
        Affiche un message de confirmation apr√®s modification d'un joueur.
        √âtapes :
        1. Affiche un message de confirmation visuel
        2. Affiche un titre pour pr√©senter les informations modifi√©es
        3. Affiche les nouvelles informations du joueur (nom, pr√©nom, date, ID)
        """
        # 1Ô∏è‚É£ Affiche un message confirmant que la mise √† jour a bien √©t√© effectu√©e
        DisplayMessage.display_player_updated()

        # 2Ô∏è‚É£ Affiche un titre pour introduire les nouvelles informations
        DisplayMessage.display_player_new_info_title()

        # 3Ô∏è‚É£ Affiche les informations actualis√©es du joueur
        DisplayMessage.display_player_new_info_details(player)

    # -----------------------
    #   SUPPRESSION JOUEUR
    # -----------------------

    def delete_player(self):
        """
        Supprime un joueur existant apr√®s confirmation.
        √âtapes :
        1. Affiche un en-t√™te clair
        2. Permet de s√©lectionner un joueur √† supprimer
        3. Demande confirmation explicite
        4. Supprime le joueur du registre si confirm√©
        5. Sauvegarde les modifications
        6. Affiche un message de succ√®s ou d'annulation
        """
        # 1Ô∏è‚É£ Affiche un titre pour entrer en mode suppression
        DisplayMessage.display_delete_player_title()

        # 2Ô∏è‚É£ S√©lectionne un joueur gr√¢ce √† _choose_player
        player = self._choose_player("supprimer")
        if player is None:  # üÖ∞ Si annulation ou saisie invalide
            return

        # 3Ô∏è‚É£ Demande confirmation explicite avant la suppression
        confirm = (
            input(
                f"‚ö†Ô∏è  Voulez-vous vraiment supprimer {player.first_name} "
                f"{player.last_name} (o/N) ? "
            )
            .strip()
            .lower()
        )

        if confirm == "o":
            # 4Ô∏è‚É£ Retire le joueur du registre global
            Player.registry.remove(player)

            # 5Ô∏è‚É£ Sauvegarde imm√©diate de la liste mise √† jour
            Player.save_all()

            # 6Ô∏è‚É£ Message confirmant la suppression
            DisplayMessage.display_player_deleted(player)
        else:
            # 7Ô∏è‚É£ Si l'utilisateur annule, afficher un message appropri√©
            DisplayMessage.display_player_not_deleted()

    # -----------------------
    #   RECHERCHE
    # -----------------------

    def search_player(self):
        """
        Recherche des joueurs dans le registre par nom, pr√©nom,
        identifiant national ou date de naissance.
        √âtapes :
        1. Affiche un en-t√™te clair
        2. Demande un terme de recherche
        3. Cherche les joueurs dont un champ contient ce terme
        4. Si r√©sultats trouv√©s : trie et affiche
        5. Sinon, affiche un message indiquant qu'il n'y a aucun r√©sultat
        """
        # 1Ô∏è‚É£ Affiche un titre pour signaler le d√©but de la recherche
        DisplayMessage.display_search_title()

        # 2Ô∏è‚É£ Demande le terme de recherche et le met en minuscules
        term = input("Recherche : ").lower().strip()

        # 3Ô∏è‚É£ Parcourt le registre et s√©lectionne les joueurs correspondant
        results = []
        for p in Player.registry:
            if (
                term in p.last_name.lower()
                or term in p.first_name.lower()
                or term in p.national_id.lower()
                or term in p.birth_date.lower()
            ):
                results.append(p)

        # 4Ô∏è‚É£ Si des joueurs sont trouv√©s, on les trie et on les affiche
        if results:
            # a) Trie par nom puis pr√©nom
            results = sorted(results, key=lambda p: (p.last_name, p.first_name))
            # b) Affiche la liste via la ConsoleView
            ConsoleView.show_players(results)
        else:
            # 5Ô∏è‚É£ Aucun r√©sultat trouv√© : affiche un message explicite
            DisplayMessage.display_player_not_found()

    # -----------------------
    #   LISTER JOUEUR
    # -----------------------

    def list_players(self):
        """
        Affiche la liste de tous les joueurs enregistr√©s, tri√©s par nom puis pr√©nom.
        √âtapes :
        1. R√©cup√®re les joueurs tri√©s par nom et pr√©nom
        2. V√©rifie si la liste est vide
        3. Affiche les joueurs via ConsoleView
        4. Ajoute une ligne vide pour une meilleure lisibilit√©
        """

        # 1Ô∏è‚É£ R√©cup√®re la liste tri√©e de tous les joueurs
        players = self._get_sorted_players()

        # 2Ô∏è‚É£ Si aucun joueur n'est enregistr√©, affiche un message et sort
        if not players:
            DisplayMessage.display_no_players_found()
            return

        # 3Ô∏è‚É£ Affiche la liste des joueurs avec num√©rotation et d√©tails
        ConsoleView.show_players(players)
