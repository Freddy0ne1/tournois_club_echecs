"""controllers/player_controller.py
Contr√¥leur pour g√©rer les joueurs.
"""

import re
from datetime import datetime
from views.console_view import ConsoleView
from models.player import Player

# -----------------------
#   Constantes globales
# -----------------------

# 1Ô∏è‚É£ Nombre maximal de tentatives pour chaque saisie obligatoire
#    Utilis√© par les m√©thodes d‚Äôentr√©e pour limiter les boucles d‚Äôinvite.
MAX_ATTEMPTS = 3


class PlayerController:
    """
    G√®re la cr√©ation, l'affichage, la modification,
    la suppression et la recherche des joueurs.
    """

    # √Ä venir : m√©thodes pour ajouter un joueur, modifier ses infos,
    # lister tous les joueurs, supprimer et rechercher.

    # -----------------------
    #   M√âTHODES D‚ÄôAIDE
    # -----------------------

    # -------- Demande de saisie obligatoire ---------

    def _input_nonempty(self, prompt):
        """
        Demande une saisie non vide √† l'utilisateur¬∑rice.
        R√©essaie jusqu'√† obtenir une valeur ou atteint MAX_ATTEMPTS.
        Retourne la cha√Æne ou None si annul√©.
        """
        # 1Ô∏è‚É£ Initialisation du compteur de tentatives
        attempt = 0

        # 2Ô∏è‚É£ Boucle de saisie : on autorise MAX_ATTEMPTS essais
        while attempt < MAX_ATTEMPTS:
            # üÖ∞ On affiche l‚Äôinvite et on lit la saisie, en supprimant espaces en trop
            value = input(prompt).strip()
            # üÖ± Si l‚Äôutilisateur¬∑rice a bien saisi quelque chose, on retourne cette valeur
            if value:
                return value

            # üÖ≤ Sinon, on incr√©mente le compteur et on renseigne l‚Äôutilisateur¬∑rice
            attempt += 1
            print(
                f"\nüî¥  Ce champ est obligatoire. "
                f"({attempt}/{MAX_ATTEMPTS}). R√©essayez.\n"
            )

        # 3Ô∏è‚É£ Si le nombre max de tentatives est atteint sans succ√®s
        print("‚ùå Nombre de tentatives d√©pass√©. Op√©ration abandonn√©e.")
        return None

    # -------- Demande de saisie date ---------

    def _input_date(self, prompt_text):
        """
        Demande une date au format jj/mm/aaaa.
        R√©essaie jusqu'√† obtenir un format valide ou atteint MAX_ATTEMPTS.
        Retourne la cha√Æne valide ou None.
        """
        # 1Ô∏è‚É£ Initialisation du compteur de tentatives
        attempt = 0

        # 2Ô∏è‚É£ Boucle de saisie, limit√©e √† MAX_ATTEMPTS essais
        while attempt < MAX_ATTEMPTS:
            # üÖ∞ Affiche l‚Äôinvite et lit la saisie sans espaces superflus
            date_str = input(prompt_text).strip()
            try:
                # üÖ± V√©rifie que la cha√Æne correspond au format jj/mm/aaaa
                datetime.strptime(date_str, "%d/%m/%Y")
                # üÖ≤ Si la conversion r√©ussit, retourne imm√©diatement la date saisie
                return date_str
            except ValueError:
                # üÖ≥ En cas d‚Äôerreur de format, incr√©mente le compteur et informe
                attempt += 1
                print(
                    f"\n‚ùå Format invalide ({attempt}/{MAX_ATTEMPTS}). Ex.: 31/12/1990\n"
                )

        # 3Ô∏è‚É£ Si toutes les tentatives √©chouent, affiche un message d‚Äôabandon et retourne None
        print("üîÅ‚ùå Nombre de tentatives d√©pass√©. Op√©ration abandonn√©e.")
        return None

    # -------- Liste tri√©e joueur de la base ---------

    def _get_sorted_players(self):
        """
        Retourne la liste des Player.registry tri√©e par nom puis pr√©nom.
        """
        # 1Ô∏è‚É£ R√©cup√®re la liste de tous les joueurs depuis registry
        # 2Ô∏è‚É£ Utilise sorted() pour cr√©er une nouvelle liste tri√©e
        #    - key=lambda p: (p.last_name, p.first_name) trie d‚Äôabord sur le nom,
        #      puis sur le pr√©nom pour d√©partager les homonymes
        # 3Ô∏è‚É£ Retourne cette liste tri√©e sans modifier l‚Äôoriginal registry
        return sorted(Player.registry, key=lambda p: (p.last_name, p.first_name))

    # -------- s√©lectionner un joueur ---------

    def _choose_player(self, action):
        """
        Affiche les joueurs et demande de choisir un num√©ro pour une action.
        Retourne le Player choisi ou None.
        """
        # 1Ô∏è‚É£ R√©cup√®re la liste des joueurs tri√©e (nom, pr√©nom)
        players = self._get_sorted_players()

        # 2Ô∏è‚É£ Si la liste est vide, informe et renvoie None
        if not players:
            print("üîç Aucun joueur disponible.")
            return None

        # 3Ô∏è‚É£ Affiche les joueurs avec leurs num√©ros via la vue console
        ConsoleView.show_players(players)

        # 4Ô∏è‚É£ Invite l‚Äôutilisateur¬∑rice √† saisir un num√©ro pour l‚Äôaction donn√©e
        choice = input(f"\nNum√©ro du joueur √† {action} : ").strip()

        # 5Ô∏è‚É£ V√©rifie que la saisie est bien un nombre
        if not choice.isdigit():
            print("‚ùå Entr√©e invalide. Utilisez un num√©ro")
            return None

        # 6Ô∏è‚É£ Convertit en entier et v√©rifie que c‚Äôest dans la plage
        idx = int(choice)
        if 1 <= idx <= len(players):
            # 7Ô∏è‚É£ Si c‚Äôest valide, renvoie l‚Äôobjet Player correspondant
            return players[idx - 1]

        # 8Ô∏è‚É£ Sinon, informe que l‚Äôindice est hors plage et renvoie None
        print("‚ùå Indice hors plage.")
        return None

    # -----------------------
    #   CREATION JOUEUR
    # -----------------------

    def create_player(self):
        """Cr√©e un nouveau joueur et l'ajoute √† la liste."""

        # üîî 1Ô∏è‚É£ En‚Äët√™te de la cr√©ation
        print("\n--- Cr√©ation d'un nouveau joueur ---\n")

        # 2Ô∏è‚É£ Saisie et validation de l‚Äôidentifiant national (max MAX_ATTEMPTS essais)
        for attempt in range(1, MAX_ATTEMPTS + 1):
            # üÖ∞ Demande une saisie non vide
            national_id = self._input_nonempty(
                "Identifiant national (AB+5 chiffres) : "
            )
            if national_id is None:
                return  # Abandon si l‚Äôutilisateur¬∑rice √©choue ou annule

            # üÖ± Normalise en majuscules
            national_id = national_id.upper()

            # üÖ≤ V√©rifie le format "AB" suivi de 5 chiffres
            if not re.match(r"AB\d{5}$", national_id):
                print(
                    f"\n‚ùå Format invalide ({attempt}/{MAX_ATTEMPTS}). Ex.‚ÄØ: AB12345\n"
                )
                continue

            # üÖ≥ Assure l‚Äôunicit√© de l‚ÄôID dans le registre
            if any(p.national_id == national_id for p in Player.registry):
                print(f"\n‚ùå Identifiant d√©j√† utilis√© ({attempt}/{MAX_ATTEMPTS}).\n")
                continue

            # ID valid√© et unique ‚Üí on sort de la boucle
            break
        else:
            # Tous les essais ont √©chou√©
            print("‚ùå √âchec de la saisie de l'ID. Annulation.")
            return

        # 3Ô∏è‚É£ Saisie du nom (obligatoire)
        last_name = self._input_nonempty("Nom du joueur : ")
        if last_name is None:
            return
        last_name = last_name.upper()  # Mise en majuscules pour homog√©n√©it√©

        # 4Ô∏è‚É£ Saisie du pr√©nom (obligatoire)
        first_name = self._input_nonempty("Pr√©nom : ")
        if first_name is None:
            return
        first_name = first_name.capitalize()  # Premi√®re lettre en majuscule

        # 5Ô∏è‚É£ Saisie de la date de naissance (format jj/mm/aaaa)
        birth_date = self._input_date("Date de naissance (jj/mm/aaaa) : ")
        if birth_date is None:
            return  # Annulation si format invalide

        # 6Ô∏è‚É£ Cr√©ation de l‚Äôinstance Player et sauvegarde globale
        new_player = Player(last_name, first_name, birth_date, national_id)
        Player.save_all()  # Persiste la liste compl√®te des joueurs dans players.json

        # 7Ô∏è‚É£ Confirmation et r√©capitulatif
        print("\n‚úÖ Joueur cr√©√© avec succ√®s !\n")
        print(
            f"--- Informations du joueur {new_player.last_name} {new_player.first_name} ---\n"
        )
        print(f"Date de naissance : {new_player.birth_date}")
        print(f"Identifiant       : {new_player.national_id}")

    # -----------------------
    #   MODIFICATION JOUEUR
    # -----------------------

    def modify_player(self):
        """Modifie les informations d'un joueur existant."""

        # 1Ô∏è‚É£ Affiche un titre pour entrer en mode modification
        print("\n--- Modification d'un joueur ---\n")

        # 2Ô∏è‚É£ S√©lection du joueur √† modifier (affiche la liste et renvoie un Player ou None)
        player = self._choose_player("modifier")
        if not player:  # Si annulation ou saisie invalide, on quitte
            return

        # 3Ô∏è‚É£ Affiche les infos actuelles pour que l‚Äôutilisateur sache quoi modifier
        print(
            f"\n--- Informations actuelles de {player.first_name} {player.last_name} ---"
        )
        print(f"ID                : {player.national_id}")
        print(f"Date de naissance : {player.birth_date}")
        print("\n‚ÑπÔ∏è  Laisser vide pour conserver la valeur actuelle.\n")

        # 4Ô∏è‚É£ Modification du nom de famille
        value = input(f"Nom [{player.last_name}] : ").strip()
        if value:  # Si l‚Äôutilisateur saisit quelque chose
            player.last_name = value.upper()  # On met en majuscules

        # 5Ô∏è‚É£ Modification du pr√©nom
        value = input(f"Pr√©nom [{player.first_name}] : ").strip()
        if value:
            player.first_name = value.capitalize()  # Majuscule initiale

        # 6Ô∏è‚É£ Modification de la date de naissance (boucle jusqu‚Äô√† format valide ou vide)
        while True:
            value = input(f"Date de naissance [{player.birth_date}] : ").strip()
            if value == "":  # Vide ‚Üí on conserve l‚Äôancienne valeur
                break
            try:
                # V√©rifie le format jj/mm/aaaa
                datetime.strptime(value, "%d/%m/%Y")
                player.birth_date = value
                break
            except ValueError:
                print("‚ùå Format invalide. Exemple : 31/12/1990")

        # 7Ô∏è‚É£ Sauvegarde de tous les joueurs mis √† jour dans players.json
        Player.save_all()

        # 8Ô∏è‚É£ Confirmation et r√©capitulatif des nouvelles valeurs
        print("\n‚úÖ Mise √† jour effectu√©e.\n")
        print("--- Nouvelles informations du joueur ---\n")
        print(
            f"{player.last_name} {player.first_name} - {player.birth_date} - "
            f"ID: {player.national_id}"
        )

        return player

    # -----------------------
    #   SUPPRESSION JOUEUR
    # -----------------------

    def delete_player(self):
        """Supprime un joueur existant apr√®s confirmation."""

        # 1Ô∏è‚É£ Affichage de l‚Äôen‚Äët√™te pour entrer en mode suppression
        print("\n--- Suppression d'un joueur ---\n")

        # 2Ô∏è‚É£ S√©lection du joueur √† supprimer via _choose_player (affiche la liste et renvoie un Player ou None)
        player = self._choose_player("supprimer")
        if player is None:  # Si annulation ou saisie invalide
            return

        # 3Ô∏è‚É£ Confirmation explicite : seul "o" valide la suppression
        confirm = (
            input(
                f"‚ö†Ô∏è  Voulez-vous vraiment supprimer {player.first_name} "
                f"{player.last_name} (o/N) ? "
            )
            .strip()
            .lower()
        )
        if confirm == "o":
            # 4Ô∏è‚É£ Suppression de l‚Äôobjet Player du registre global
            Player.registry.remove(player)
            # 5Ô∏è‚É£ Persistance : √©criture imm√©diate du fichier players.json
            Player.save_all()
            # 6Ô∏è‚É£ Message de succ√®s pour rassurer l‚Äôutilisateur¬∑rice
            print(f"\n‚úÖ {player.first_name} {player.last_name} a √©t√© supprim√©.\n")
        else:
            # 7Ô∏è‚É£ Annulation : l‚Äôutilisateur¬∑rice d√©cide de ne pas supprimer
            print("‚ùå Suppression annul√©e.\n")

    # -----------------------
    #   RECHERCHE
    # -----------------------

    def search_player(self):
        """Recherche des joueurs par nom, pr√©nom ou identifiant national."""

        # 1Ô∏è‚É£ Affiche un titre pour guider l‚Äôutilisateur¬∑rice
        print("\n--- Recherche de joueurs ---\n")

        # 2Ô∏è‚É£ Lit le terme de recherche, en minuscules et sans espaces superflus
        term = input("Recherche : ").lower().strip()

        # 3Ô∏è‚É£ Parcourt tous les joueurs du registre et s√©lectionne ceux qui contiennent le terme
        results = []
        for p in Player.registry:
            if (
                term in p.last_name.lower()
                or term in p.first_name.lower()
                or term in p.national_id.lower()
                or term in p.birth_date.lower()
            ):
                results.append(p)

        # 4Ô∏è‚É£ Si on a trouv√© au moins un r√©sultat, on les trie et on les affiche
        if results:
            # a) Tri alphab√©tique par nom puis pr√©nom
            results = sorted(results, key=lambda p: (p.last_name, p.first_name))
            # b) Affichage via la vue console
            ConsoleView.show_players(results)
        else:
            # 5Ô∏è‚É£ Aucun r√©sultat ‚Üí message clair
            print("üîç  Aucun r√©sultat trouv√©.")

    # -----------------------
    #   LISTER JOUEUR
    # -----------------------

    def list_players(self):
        """Affiche la liste tri√©e des joueurs."""
        # 1Ô∏è‚É£ Affiche un en‚Äët√™te pour d√©marquer la section
        print("\n--- Liste des joueurs ---\n")

        # 2Ô∏è‚É£ R√©cup√®re la liste des joueurs tri√©s par nom puis pr√©nom
        players = self._get_sorted_players()

        # 3Ô∏è‚É£ Si la liste est vide, informe et quitte la m√©thode
        if not players:
            print("Aucun joueur trouv√©.\n")
            return

        # 4Ô∏è‚É£ D√©l√®gue l‚Äôaffichage d√©taill√© √† ConsoleView (num√©rotation, nom, ID, date de naissance)
        ConsoleView.show_players(players)

        # 5Ô∏è‚É£ Ajoute une ligne vide pour l‚Äôespacement final
        print()
