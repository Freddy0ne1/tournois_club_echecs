"""
Module tournament_start
G√®re le d√©marrage d'un tournoi et la cr√©ation du premier round.
"""

from .tournament_controller_base import TournamentController as BaseTournamentController


class TournamentController(BaseTournamentController):
    """
    Sous-contr√¥leur pour le d√©marrage d'un tournoi.
    """

    # -----------------------
    #   DEMARRAGE TOURNOI
    # -----------------------

    # ------- D√©marrage d‚Äôun tournoi et cr√©ation du premier round -------
    def start_tournament(self):
        """
        D√©marre un tournoi si toutes les conditions sont r√©unies :
        1. Choisit le tournoi
        2. V√©rifie les conditions (au moins 2 joueurs, nombre pair, etc.)
        3. Lance le tournoi (changement de statut et cr√©ation du premier round)
        4. Affiche les matchs du premier round
        """
        # 1Ô∏è‚É£ Affiche un titre pour signaler l'action
        print("\n--- D√©marrage d'un tournoi ---")

        # 2Ô∏è‚É£ S√©lection du tournoi √† d√©marrer
        tournament = self._choose("d√©marrer")
        if not tournament:  # üÖ∞ Annule si aucun tournoi s√©lectionn√©
            return

        # 3Ô∏è‚É£ V√©rifie si le tournoi peut √™tre d√©marr√© (via m√©thode d√©di√©e)
        if not self._can_start_tournament(tournament):
            return

        # 4Ô∏è‚É£ Lance le tournoi et cr√©e le premier round
        self._launch_tournament(tournament)

        # 5Ô∏è‚É£ Affiche les appariements (matchs) du round en cours
        self._display_rounds(tournament)

        # 6Ô∏è‚É£ Indique √† l'utilisateur comment saisir les scores
        print(
            "\nüí° Utilisez l'option 7 du menu Tournoi pour saisir les scores du round."
        )

    # ------- V√©rification des conditions avant de d√©marrer un tournoi -------
    def _can_start_tournament(self, tournament):
        """
        V√©rifie toutes les conditions avant de d√©marrer un tournoi :
        - Il doit y avoir des joueurs inscrits
        - Leur nombre doit √™tre pair et ‚â• 2
        - Le tournoi ne doit pas √™tre d√©j√† termin√© ou en cours
        Retourne True si toutes les conditions sont r√©unies, sinon False.
        """
        # 1Ô∏è‚É£ V√©rifie qu'il y a au moins un joueur inscrit
        if not tournament.players:
            print("\n‚ùå Impossible : aucun joueur n'est inscrit.")
            return False

        # 2Ô∏è‚É£ V√©rifie que le nombre de joueurs est pair et au moins 2
        count = len(tournament.players)
        if count < 2 or count % 2 != 0:
            print("\n‚ùå Il faut un nombre pair de joueurs (au moins 2).")
            return False

        # 3Ô∏è‚É£ V√©rifie que le tournoi n'est pas d√©j√† termin√©
        if tournament.status == "termin√©":
            print(f"‚ùå Impossible : le tournoi '{tournament.name}' est d√©j√† termin√©.")
            return False

        # 4Ô∏è‚É£ V√©rifie que le tournoi n'est pas d√©j√† en cours
        if tournament.status == "en cours":
            print(f"\n‚ÑπÔ∏è  Statut du tournoi '{tournament.name}' : {tournament.status}.")
            print(
                "üí° Utilisez l'option 7 du menu Tournoi pour saisir les scores du round."
            )
            return False

        # 5Ô∏è‚É£ Si toutes les conditions sont r√©unies, retourne True
        return True

    # ------- Lancer un tournoi : statut, premier round et sauvegarde -------
    def _launch_tournament(self, tournament):
        """
        Lance le tournoi :
        - Passe son statut √† "en cours"
        - Cr√©e le premier round avec les appariements
        - Sauvegarde l'√©tat mis √† jour
        """
        # 1Ô∏è‚É£ Affiche un message de confirmation de d√©marrage
        count = len(tournament.players)
        print(f"\nüèÅ Tournoi '{tournament.name}' d√©marr√©.\n")
        print(f"Joueurs inscrits : {count}")
        print(f"Nombre de rounds : {tournament.total_rounds}\n")

        # 2Ô∏è‚É£ Met √† jour le statut du tournoi
        tournament.status = "en cours"

        # 3Ô∏è‚É£ Cr√©e le premier round et g√©n√®re les appariements
        tournament.start_next_round()

        # 4Ô∏è‚É£ Sauvegarde l'√©tat du tournoi apr√®s d√©marrage
        self._save(tournament)

    # ------- Afficher les rounds et leurs matchs d'un tournoi -------
    def _display_rounds(self, tournament):
        """
        Affiche les appariements (matchs) de tous les rounds du tournoi.
        Pour chaque round :
        - Affiche son num√©ro
        - Liste les matchs sous la forme :
            Joueur1 [ID] VS Joueur2 [ID]
        """
        # 1Ô∏è‚É£ Parcourt tous les rounds du tournoi avec leur index
        for idx, rnd in enumerate(tournament.rounds, 1):
            # üÖ∞ Affiche le num√©ro du round
            print(f"\nü•ä Round {idx} :")

            # üÖ± Affiche chaque match avec les deux joueurs
            for m in rnd.matches:
                p1, p2 = m.players
                print(
                    f"{p1.last_name} {p1.first_name} [{p1.national_id}] VS "
                    f"{p2.last_name} {p2.first_name} [{p2.national_id}]"
                )
