"""Contr√¥leur des tournois ‚Äî gestion CRUD, d√©roulement et exports."""

import csv
import json

# import random
from datetime import datetime
from pathlib import Path

from models.player import Player
from models.tournament import Tournament
from views.console_view import ConsoleView

# -----------------------
#   Constantes globales
# -----------------------

# 1Ô∏è‚É£ Nombre maximal de tentatives pour chaque saisie obligatoire
MAX_ATTEMPTS = 3

# 2Ô∏è‚É£ Racine du projet (un niveau au-dessus du dossier courant)
#    - Path(__file__)       : chemin vers ce fichier
#    - .resolve()           : chemin absolu, sans liens symboliques
#    - .parents[1]          : remonte d‚Äôun dossier
BASE_DIR = Path(__file__).resolve().parents[1]

# 3Ô∏è‚É£ Dossiers de donn√©es et d‚Äôexport
#    - DATA_DIR   : o√π sont stock√©s les JSON des tournois
#    - EXPORT_DIR : o√π on place les fichiers d‚Äôexport (rapports, CSV‚Ä¶)
DATA_DIR = BASE_DIR / "data" / "tournaments"
EXPORT_DIR = BASE_DIR / "export"

# 4Ô∏è‚É£ Cr√©ation automatique du dossier d‚Äôexport s‚Äôil n‚Äôexiste pas
#    - exist_ok=True : pas d‚Äôerreur si le dossier est d√©j√† pr√©sent
EXPORT_DIR.mkdir(exist_ok=True)


class TournamentController:
    """G√®re la cr√©ation, modification, suppression, d√©roulement et exports."""

    def __init__(self):
        """Initialise la liste des tournois en m√©moire."""
        # 5Ô∏è‚É£ Liste interne pour stocker les objets Tournament charg√©s
        self._tours = []

        # 6Ô∏è‚É£ Chargement automatique des tournois existants depuis DATA_DIR
        #    (impl√©ment√© dans la m√©thode _load)
        self._load()

    def _input_nonempty(self, prompt):
        """
        Demande une saisie non vide √† l'utilisateur¬∑rice.
        Retourne la cha√Æne saisie, ou None si limite d'essais atteinte.
        """
        # 1Ô∏è‚É£ Initialisation du compteur de tentatives
        attempt = 0

        # 2Ô∏è‚É£ Boucle de saisie : on autorise MAX_ATTEMPTS essais
        while attempt < MAX_ATTEMPTS:
            # a) On affiche l‚Äôinvite et on r√©cup√®re la saisie, sans espaces superflus
            value = input(prompt).strip()
            # b) Si la saisie n'est pas vide, on la retourne imm√©diatement
            if value:
                return value

            # c) Sinon, on incr√©mente le compteur et on affiche un message d‚Äôerreur
            attempt += 1
            print(
                f"\nüî¥  Ce champ est obligatoire. "
                f"({attempt}/{MAX_ATTEMPTS}) Veuillez r√©essayer.\n"
            )

        # 3Ô∏è‚É£ Si on a d√©pass√© le nombre de tentatives autoris√©es
        print("üîÅ‚ùå Nombre de tentatives d√©pass√©. Op√©ration annul√©e.")
        return None

    def _input_date(self, prompt):
        """
        Demande une date au format jj/mm/aaaa.
        Retourne la date valid√©e en cha√Æne, ou None si limite d'essais atteinte.
        """
        # 1Ô∏è‚É£ Initialisation du compteur de tentatives
        attempt = 0

        # 2Ô∏è‚É£ Boucle de saisie : on autorise MAX_ATTEMPTS essais
        while attempt < MAX_ATTEMPTS:
            # a) Affiche l‚Äôinvite et r√©cup√®re la saisie sans espaces superflus
            value = input(prompt).strip()
            try:
                # b) Tente de convertir la cha√Æne en date selon le format jour/mois/ann√©e
                datetime.strptime(value, "%d/%m/%Y")
                # c) Si la conversion r√©ussit, on retourne la valeur saisie
                return value
            except ValueError:
                # d) En cas d‚Äôerreur de format, on incr√©mente les tentatives
                attempt += 1
                # e) Message d‚Äôerreur indiquant le format attendu et le nombre d‚Äôessais restants
                print(
                    f"\n‚ùå Format invalide ({attempt}/{MAX_ATTEMPTS}) "
                    f"- (ex. 31/12/2025). Veuillez r√©essayer.\n"
                )

        # 3Ô∏è‚É£ Si on a √©puis√© toutes les tentatives sans succ√®s
        print("\n‚ùå Nombre de tentatives d√©pass√©. Op√©ration annul√©e.")
        return None

    def _choose(self, action):
        """
        Affiche la liste des tournois et demande de choisir un index.
        Retourne l'objet Tournament ou None.
        """
        # 1Ô∏è‚É£ Si la liste des tournois est vide, on pr√©vient et on sort
        if not self._tours:
            print("\nüîç Aucun tournoi disponible.")
            return None

        # 2Ô∏è‚É£ Affiche les tournois disponibles
        ConsoleView.show_tournaments(self._tours)

        # 3Ô∏è‚É£ Demande √† l‚Äôutilisateur¬∑rice de choisir un num√©ro
        choice = input(f"\nNum√©ro du tournoi pour {action} : ").strip()

        # 4Ô∏è‚É£ V√©rification de la saisie : doit √™tre un nombre
        if not choice.isdigit():
            print("\n‚ùå Veuillez entrer un num√©ro valide.")
            return None

        # 5Ô∏è‚É£ Conversion en entier et v√©rification de la plage
        idx = int(choice)
        if 1 <= idx <= len(self._tours):
            # 6Ô∏è‚É£ Si tout est OK, on renvoie l‚Äôobjet Tournament s√©lectionn√©
            return self._tours[idx - 1]

        # 7Ô∏è‚É£ Si le chiffre est hors de la plage, on pr√©vient et on sort
        print("\n‚ùå Num√©ro hors plage.")
        return None

    # -----------------------
    #   CHARGEMENT / RELOAD
    # -----------------------

    def _load(self):
        """Charge tous les tournois valides depuis data/tournaments."""
        # 1Ô∏è‚É£ R√©initialise la liste interne des tournois
        self._tours.clear()

        # 2Ô∏è‚É£ Si le dossier de donn√©es n'existe pas, il n'y a rien √† charger
        if not DATA_DIR.exists():
            return

        # 3Ô∏è‚É£ Parcourt chaque fichier JSON du r√©pertoire
        for file in DATA_DIR.glob("*.json"):
            try:
                # a) Tente de charger le tournoi via la m√©thode de classe
                tour = Tournament.load(file.name)
            except (ValueError, json.JSONDecodeError):
                # b) Si le fichier est mal form√© ou invalide, on l'ignore en avertissant
                print(f"‚ö†Ô∏è  Ignor√© : impossible de charger {file.name}")
            else:
                # c) Si tout se passe bien, on ajoute le tournoi √† la liste
                self._tours.append(tour)

    # -----------------------
    #   SAUVEGARDE
    # -----------------------

    def _save(self, tour):
        """
        Sauvegarde un tournoi dans le r√©pertoire data/tournaments
        en appelant sa m√©thode save().
        """
        # D√©l√®gue la sauvegarde de l'objet Tournament √† sa propre m√©thode
        tour.save()

    # -----------------------
    #   CR√âATION
    # -----------------------

    def create_tournament(self):
        """
        Guide la cr√©ation pas √† pas d'un nouveau tournoi.
        1) Nom  2) Lieu  3) Date d√©but  4) Date fin  5) Description  6) Rounds
        """
        # 1Ô∏è‚É£ Affichage de l‚Äôen‚Äët√™te de cr√©ation
        print("\n=== Cr√©ation d'un tournoi ===\n")

        # 2Ô∏è‚É£ Saisie du nom du tournoi (obligatoire)
        name = self._input_nonempty("Nom du tournoi : ")
        if name is None:  # si l‚Äôutilisateur abandonne apr√®s MAX_ATTEMPTS
            return

        # 3Ô∏è‚É£ Saisie du lieu (obligatoire)
        place = self._input_nonempty("Lieu : ")
        if place is None:
            return

        # 4Ô∏è‚É£ Saisie de la date de d√©but (format jj/mm/aaaa)
        start_date = self._input_date("Date d√©but (jj/mm/aaaa) : ")
        if start_date is None:  # abandon en cas de format invalide
            return

        # 5Ô∏è‚É£ Saisie et validation de la date de fin
        #    On boucle jusqu‚Äô√† MAX_ATTEMPTS pour s‚Äôassurer que date_fin ‚â• date_d√©but
        end_date = None
        for attempt in range(1, MAX_ATTEMPTS + 1):
            saisie = self._input_date("Date fin (jj/mm/aaaa) : ")
            if saisie is None:
                return
            # Conversion en datetime pour comparer
            dt_start = datetime.strptime(start_date, "%d/%m/%Y")
            dt_end = datetime.strptime(saisie, "%d/%m/%Y")
            if dt_end >= dt_start:
                end_date = saisie
                break
            # Message d‚Äôerreur si fin < d√©but
            print(
                f"\n‚ùå La date de fin doit √™tre ‚â• date de d√©but "
                f"({attempt}/{MAX_ATTEMPTS}).\n"
            )
        if end_date is None:
            print("\n‚ùå Nombre de tentatives d√©pass√©. Op√©ration annul√©e.")
            return

        # 6Ô∏è‚É£ Saisie de la description (obligatoire)
        description = self._input_nonempty("Description         : ")
        if description is None:
            return

        # 7Ô∏è‚É£ Saisie facultative du nombre de tours (d√©faut = 4)
        while True:
            nb = input("Nombre de tours (d√©faut 4) : ").strip()
            if nb == "":
                total_rounds = 4
                break
            if nb.isdigit() and int(nb) > 0:
                total_rounds = int(nb)
                break
            print("Entrez un entier positif ou laissez vide pour 4.")

        # 8Ô∏è‚É£ Cr√©ation de l‚Äôobjet Tournament et ajout √† la liste
        tour = Tournament(name, place, start_date, end_date, description, total_rounds)
        self._tours.append(tour)

        # 9Ô∏è‚É£ Sauvegarde imm√©diate et message de confirmation
        self._save(tour)
        print("\n‚úÖ Tournoi cr√©√©.\n")

        # üîü Affichage r√©capitulatif des infos du tournoi
        print(f"--- Informations du tournoi '{tour.name}' ---\n")
        print(f"Lieu             : {tour.place}")
        print(f"Dates            : {tour.start_date} ‚Üí {tour.end_date}")
        print(f"Description      : {tour.description}")
        print(f"Nombre de tours  : {tour.total_rounds}")

    # -----------------------
    #   MODIFICATION
    # -----------------------

    def modify_tournament(self):
        """Modifie les informations d'un tournoi existant."""
        # 1Ô∏è‚É£ Titre de la section de modification
        print("\n--- Modification d'un tournoi ---")

        # 2Ô∏è‚É£ S√©lection du tournoi √† modifier
        tour = self._choose("modifier")
        if not tour:  # Si aucun tournoi s√©lectionn√© ou erreur de saisie
            return

        # 3Ô∏è‚É£ Affichage des informations actuelles pour r√©f√©rence
        print(f"\n--- Infos actuelles du tournoi '{tour.name}' ---")
        print(f"Lieu             : {tour.place}")
        print(f"Dates            : {tour.start_date} ‚Üí {tour.end_date}")
        print(f"Description      : {tour.description}")
        print(f"Nombre de tours  : {tour.total_rounds}")

        # 4Ô∏è‚É£ Info pour l'utilisateur¬∑rice¬†: laisser vide pour conserver l‚Äôancienne valeur
        print("\n‚ÑπÔ∏è  Laisser vide pour conserver la valeur actuelle.\n")

        # 5Ô∏è‚É£ Modification du nom
        new = input(f"Nom [{tour.name}] : ").strip()
        if new:
            tour.name = new

        # 6Ô∏è‚É£ Modification du lieu
        new = input(f"Lieu [{tour.place}] : ").strip()
        if new:
            tour.place = new

        # 7Ô∏è‚É£ Modification de la date de d√©but
        while True:
            new = input(f"Date d√©but [{tour.start_date}] : ").strip()
            if not new:  # vide ‚Üí conserver
                break
            try:
                # v√©rifie le format jj/mm/aaaa
                datetime.strptime(new, "%d/%m/%Y")
                tour.start_date = new
                break
            except ValueError:
                print("‚ùå Format invalide. Exemple : 31/12/2025")

        # 8Ô∏è‚É£ Modification de la date de fin
        while True:
            new = input(f"Date fin [{tour.end_date}] : ").strip()
            if not new:  # vide ‚Üí conserver
                break
            try:
                date_fin = datetime.strptime(new, "%d/%m/%Y")
                date_deb = datetime.strptime(tour.start_date, "%d/%m/%Y")
                if date_fin >= date_deb:
                    tour.end_date = new
                    break
                else:
                    print("‚ùå La date de fin doit √™tre ‚â• date de d√©but.")
            except ValueError:
                print("‚ùå Format invalide. Exemple : 31/12/2025")

        # 9Ô∏è‚É£ Modification de la description
        new = input(f"Description [{tour.description}] : ").strip()
        if new:
            tour.description = new

        # üîü Modification du nombre de tours
        while True:
            nb = input(f"Nombre de tours [{tour.total_rounds}] : ").strip()
            if nb == "":  # vide ‚Üí conserver
                break
            if nb.isdigit() and int(nb) > 0:
                tour.total_rounds = int(nb)
                break
            print("Entrez un entier positif ou laissez vide pour conserver.")

        # 1Ô∏è‚É£1Ô∏è‚É£ Sauvegarde et confirmation
        self._save(tour)
        print("\n‚úÖ Mise √† jour effectu√©e.\n")

        # 1Ô∏è‚É£2Ô∏è‚É£ Affichage des nouvelles infos pour v√©rifier
        print(f"--- Nouvelles infos du tournoi '{tour.name}' ---\n")
        print(f"Lieu             : {tour.place}")
        print(f"Dates            : {tour.start_date} ‚Üí {tour.end_date}")
        print(f"Description      : {tour.description}")
        print(f"Nombre de tours  : {tour.total_rounds}")

    # -----------------------
    #   SUPPRESSION
    # -----------------------

    def delete_tournament(self):
        """Supprime un tournoi existant."""
        # 1Ô∏è‚É£ Affichage de l‚Äôen‚Äët√™te de suppression
        print("\n--- Suppression d'un tournoi ---")

        # 2Ô∏è‚É£ S√©lection du tournoi √† supprimer
        #    _choose("supprimer") affiche la liste et renvoie l'objet ou None
        tour = self._choose("supprimer")
        if not tour:  # Si aucun tournoi n‚Äôest s√©lectionn√© ou erreur
            return

        # 3Ô∏è‚É£ Demande de confirmation √† l‚Äôutilisateur¬∑rice
        #    Seul "o" (oui) en minuscules valide la suppression
        if input(f"\nSupprimer {tour.name} (o/N) ? ").lower() != "o":
            return

        # 4Ô∏è‚É£ Construction du chemin vers le fichier JSON correspondant
        #    On reprend la m√™me logique que _file_path : nom en minuscules et underscores
        path = DATA_DIR / f"{tour.name.lower().replace(' ', '_')}.json"

        # 5Ô∏è‚É£ Suppression du fichier JSON si pr√©sent
        if path.exists():
            path.unlink()  # supprime physiquement le fichier

        # 6Ô∏è‚É£ Retrait de l‚Äôobjet Tournament de la liste en m√©moire
        self._tours.remove(tour)

        # 7Ô∏è‚É£ Message de confirmation final
        print(f"\n‚úÖ Le tournoi '{tour.name}' - {tour.place} a √©t√© supprim√©.")

    # -----------------------
    #   LISTE
    # -----------------------

    def list_tournaments(self):
        """Affiche la liste des tournois."""
        # 1Ô∏è‚É£ Affichage de l‚Äôen‚Äët√™te pour d√©marquer la section
        print("\n--- Liste des tournois ---")

        # 2Ô∏è‚É£ D√©l√©gation de l‚Äôaffichage d√©taill√© √† ConsoleView
        #    Cette m√©thode va lister chaque tournoi avec ses infos cl√©s
        ConsoleView.show_tournaments(self._tours)

    # -----------------------
    #   AJOUT/RETRAIT JOUEUR(S)
    # -----------------------

    def manage_players_in_tournament(self):
        """Ajoute ou retire des joueurs d'un tournoi."""
        # 1Ô∏è‚É£ Titre de la section pour guider l‚Äôutilisateur¬∑rice
        print("\n--- Gestion des joueurs d'un tournoi ---")

        # 2Ô∏è‚É£ S√©lection du tournoi √† g√©rer
        tour = self._choose("g√©rer les joueurs de")
        if not tour:  # Si aucun tournoi s√©lectionn√© ou erreur de saisie
            return

        # 3Ô∏è‚É£ Interdire la modification une fois le tournoi d√©marr√©
        if tour.status != "non d√©marr√©":
            print("\n‚ùå Impossible apr√®s d√©marrage.")
            return

        # 4Ô∏è‚É£ Boucle du menu de gestion jusqu‚Äô√† retour (option 0)
        while True:
            # üÖ∞ Affichage des infos cl√©s du tournoi
            print("\nüèÜ Informations du tournoi :\n")
            print(f"Nom                : {tour.name}")
            print(f"Lieu               : {tour.place}")
            print(f"Dates              : {tour.start_date} ‚Üí {tour.end_date}")
            print(f"Description        : {tour.description}")
            print(f"Nombre de tours    : {tour.total_rounds}")
            print(f"Joueurs inscrits   : {len(tour.players)}")

            # üÖ± Menu d‚Äôactions
            print("\n--- Ajouter ou retirer joueur(s) ---")
            print("1. Ajouter joueur(s)")
            print("2. Retirer joueur(s)")
            print("0. Retour\n")

            # üÖ≤ Lecture du choix de l‚Äôutilisateur¬∑rice
            choice = input("Votre choix : ").strip()

            # üÖ≥ Ex√©cution de l‚Äôaction choisie
            if choice == "1":
                self._add_players(tour)
            elif choice == "2":
                self._remove_players(tour)
            elif choice == "0":
                break  # Sortie de la boucle et fin de la m√©thode
            # üÖ¥ Toute autre saisie invalide red√©marre la boucle sans action

    def _add_players(self, tour):
        """Ajoute des joueurs √† un tournoi, sans doublons et sans saisie multiple."""
        # 1Ô∏è‚É£ On r√©cup√®re la liste compl√®te des joueurs et on la trie par nom/pr√©nom
        all_players = sorted(Player.registry, key=lambda p: (p.last_name, p.first_name))

        # 2Ô∏è‚É£ On retire de cette liste ceux qui sont d√©j√† inscrits dans le tournoi
        available = [p for p in all_players if p not in tour.players]

        # 3Ô∏è‚É£ Si plus personne n‚Äôest disponible, on informe et on arr√™te
        if not available:
            print("\nüë§ Tous les joueurs sont d√©j√† inscrits.")
            return

        # 4Ô∏è‚É£ Affichage num√©rot√© des joueurs qu‚Äôon peut ajouter
        print("\n--- Joueurs disponibles √† l'ajout ---")
        for i, p in enumerate(available, 1):
            print(
                f"{i}. {p.last_name} {p.first_name} | {p.national_id} | {p.birth_date}"
            )

        # 5Ô∏è‚É£ On demande les num√©ros (s√©par√©s par des virgules) pour ajouter plusieurs joueurs
        nums = input("\nNum√©ros √† ajouter (s√©par√©s par des virgules) : ")
        added = []  # liste des joueurs effectivement ajout√©s
        seen = set()  # pour √©viter les doublons dans la saisie

        # 6Ô∏è‚É£ Traitement de chaque jeton saisi
        for token in nums.split(","):
            token = token.strip()
            # üÖ∞ Ignorer si ce n‚Äôest pas un nombre
            if not token.isdigit():
                continue
            # üÖ± Ignorer les doublons de saisie
            if token in seen:
                print(f"‚ö†Ô∏è  Num√©ro {token} dupliqu√©, ignor√©.")
                continue
            seen.add(token)

            # üÖ≤ V√©rifier que le num√©ro correspond √† un index valide
            idx = int(token) - 1
            if 0 <= idx < len(available):
                p = available[idx]
                tour.players.append(p)  # ajout au tournoi
                added.append(p)  # enregistrement pour le retour utilisateur
            else:
                print(f"‚ö†Ô∏è  Le num√©ro {token} n'est pas valide.")

        # 7Ô∏è‚É£ Si au moins un joueur a √©t√© ajout√© :
        if added:
            # üÖ∞ On trie √† nouveau la liste des joueurs du tournoi
            tour.players.sort(key=lambda p: (p.last_name, p.first_name))
            # üÖ± On sauvegarde imm√©diatement le tournoi mis √† jour
            self._save(tour)
            # üÖ≤ On affiche la liste des ajouts
            print("\nüë§ Joueur(s) ajout√©(s) :")
            for p in added:
                print(f"- {p.last_name} {p.first_name} [{p.national_id}]")
        else:
            # 8Ô∏è‚É£ Sinon, on indique qu‚Äôaucun ajout n‚Äôa eu lieu
            print("\nüë§ Aucun nouveau joueur ajout√©.")

    def _remove_players(self, tour):
        """Retire un ou plusieurs joueurs d'un tournoi NON d√©marr√©, avec confirmation."""

        # 1Ô∏è‚É£ V√©rifie s‚Äôil y a des joueurs inscrits
        if not tour.players:
            print("\nüë§ Aucun joueur inscrit.")
            return

        # 2Ô∏è‚É£ Trie la liste des joueurs par nom puis pr√©nom pour un affichage ordonn√©
        tour.players.sort(key=lambda p: (p.last_name, p.first_name))

        # 3Ô∏è‚É£ Affiche la liste num√©rot√©e des joueurs
        print("\n--- Joueurs inscrits ---")
        for i, p in enumerate(tour.players, 1):
            print(
                f"{i}. {p.last_name} {p.first_name} | {p.national_id} | {p.birth_date}"
            )

        # 4Ô∏è‚É£ Demande les num√©ros (virgule‚Äës√©par√©s) des joueurs √† retirer
        nums = input("\nNum√©ros √† retirer (s√©par√©s par des virgules) : ")
        to_remove = []
        for token in nums.split(","):
            token = token.strip()
            # a) Ignorer si ce n‚Äôest pas un chiffre
            if not token.isdigit():
                continue
            idx = int(token) - 1
            # b) Si l‚Äôindex est valide, ajoute le joueur √† la liste de retrait
            if 0 <= idx < len(tour.players):
                to_remove.append(tour.players[idx])

        # 5Ô∏è‚É£ Si aucun num√©ro valide n‚Äôa √©t√© saisi, on informe et on sort
        if not to_remove:
            print("\n‚ùå Aucun num√©ro valide.")
            return

        # 6Ô∏è‚É£ Pour chaque joueur s√©lectionn√©, demande confirmation avant suppression
        removed = []
        for p in to_remove:
            if input(f"Supprimer {p.last_name} {p.first_name} (o/N) ? ").lower() == "o":
                tour.players.remove(p)
                removed.append(p)

        # 7Ô∏è‚É£ Si des suppressions ont eu lieu, on trie, sauvegarde et on affiche le retour
        if removed:
            # a) Re‚Äëtrie la liste des joueurs restants
            tour.players.sort(key=lambda p: (p.last_name, p.first_name))
            # b) Sauvegarde l‚Äô√©tat du tournoi mis √† jour
            self._save(tour)
            # c) Affiche la liste des joueurs retir√©s
            print("\nüë§ Joueur(s) retir√©(s) :")
            for p in removed:
                print(f"- {p.last_name} {p.first_name} [{p.national_id}]")
        else:
            # 8Ô∏è‚É£ Si aucune suppression confirm√©e, on l‚Äôindique √† l‚Äôutilisateur¬∑rice
            print("\nüë§ Aucune suppression effectu√©e.")

    # -----------------------
    #   D√âMARRER
    # -----------------------

    def start_tournament(self):
        """D√©marre un tournoi si suffisamment de joueurs sont inscrits."""
        # 1Ô∏è‚É£ Titre de la section pour informer l‚Äôutilisateur¬∑rice
        print("\n--- D√©marrage d'un tournoi ---")

        # 2Ô∏è‚É£ S√©lection du tournoi √† d√©marrer
        tour = self._choose("d√©marrer")
        if not tour:  # Si aucun tournoi n‚Äôest s√©lectionn√© ou erreur de saisie
            return

        # 3Ô∏è‚É£ V√©rifier qu‚Äôil y a au moins 1 joueur inscrit
        if not tour.players:
            print("\n‚ùå Impossible : aucun joueur n'est inscrit.")
            return

        # 4Ô∏è‚É£ V√©rifier qu‚Äôil y a un nombre pair de joueurs (et au moins 2)
        count = len(tour.players)
        if count < 2 or count % 2 != 0:
            print("\n‚ùå Il faut un nombre pair de joueurs (au moins 2).")
            return

        # 5Ô∏è‚É£ Emp√™cher de relancer un tournoi d√©j√† termin√©
        if tour.status == "termin√©":
            print(f"‚ùå Impossible‚ÄØ: le tournoi '{tour.name}' est d√©j√† termin√©.")
            return

        # 6Ô∏è‚É£ Si le tournoi est d√©j√† en cours, orienter vers la saisie des scores
        if tour.status == "en cours":
            print(f"\n‚ÑπÔ∏è  Statut du tournoi '{tour.name}' : {tour.status}.")
            print(
                "üí° Utilisez l'option 7 du menu Tournoi pour saisir les scores du round."
            )
            return

        # 7Ô∏è‚É£ Annoncer le d√©marrage et afficher quelques infos
        print(f"\nüèÅ Tournoi '{tour.name}' d√©marr√©.\n")
        print(f"Joueurs inscrits : {count}")
        print(f"Nombre de rounds : {tour.total_rounds}\n")

        # 8Ô∏è‚É£ Passer le statut √† "en cours" et cr√©er le 1er round
        tour.status = "en cours"
        tour.start_next_round()
        self._save(tour)  # sauvegarde imm√©diate de l‚Äô√©tat

        # 9Ô∏è‚É£ Afficher les appariements du ou des rounds cr√©√©s
        for idx, rnd in enumerate(tour.rounds, 1):
            print(f"\nü•ä Round {idx} :")
            for m in rnd.matches:
                p1, p2 = m.players
                print(
                    f"{p1.last_name} {p1.first_name} [{p1.national_id}] VS "
                    f"{p2.last_name} {p2.first_name} [{p2.national_id}]"
                )

        # üîü Rappel de la marche √† suivre pour saisir les scores
        print(
            "\nüí° Utilisez l'option 7 du menu Tournoi pour saisir les scores du round."
        )

    # -----------------------
    #   SAISIE SCORES
    # -----------------------

    def enter_scores_current_round(self):
        """Saisit les scores du round en cours, ou affiche un message si non d√©marr√©/termin√©."""

        # 1Ô∏è‚É£ En‚Äët√™te de la saisie
        print("\n--- Saisie des scores du round en cours ---")

        # 2Ô∏è‚É£ S√©lection du tournoi cible
        tour = self._choose("saisir les scores")
        if not tour:  # si aucun tournoi s√©lectionn√© ou erreur de saisie
            return

        # 3Ô∏è‚É£ Cas o√π le tournoi n'a pas encore d√©marr√©
        if tour.status == "non d√©marr√©":
            print("\n‚ùå Impossible : Le tournoi n'a pas encore d√©marr√©.")
            print("üí° Utilisez l'option 6 du menu Tournoi pour d√©marrer le tournoi.")
            return

        # 4Ô∏è‚É£ Cas o√π le tournoi est d√©j√† termin√©
        if tour.status == "termin√©":
            print(f"\n‚ÑπÔ∏è  Le tournoi '{tour.name}' est d√©j√† termin√©.")
            return

        # üëâ √Ä partir d'ici, le tournoi est en cours
        rnd = tour.rounds[-1]  # dernier round cr√©√©
        num = tour.current_round_index  # indice 1-based du round

        # 5Ô∏è‚É£ Si le round est d√©j√† cl√¥tur√©, affiche un r√©cap
        if rnd.end_time:
            print("\nü•ä Round d√©j√† jou√©.")
            print(
                "üí° Utilisez l'option 8 du menu Tournoi pour d√©marrer le round suivant."
            )
            print(f"\n--- R√©capitulatif du round {num} ---")
            for m in rnd.matches:
                p1, p2 = m.players
                s1, s2 = m.scores
                print(
                    f"{p1.last_name} {p1.first_name} {s1} - {s2} {p2.last_name} {p2.first_name}"
                )
            return

        # 6Ô∏è‚É£ Invitation √† saisir les scores
        print(f"\n===== Score du tournoi {tour.name} =====")
        print("üìå Rappel : format 1-0, 0-1, 0.5-0.5 (1 victoire, 0 d√©faite, 0.5 nul)")
        print(f"\nü•ä Round {num}\n")

        results = []  # liste brute pour record_results
        recap = []  # stockage local pour l‚Äôaffichage de fin

        # 7Ô∏è‚É£ Boucle sur chaque match pour lire un score valide
        for i, m in enumerate(rnd.matches, 1):
            p1, p2 = m.players
            while True:
                # üÖ∞ Invite l‚Äôutilisateur √† entrer le score
                s = (
                    input(
                        f"{p1.last_name} {p1.first_name}[{p1.national_id}] VS "
                        f"{p2.last_name} {p2.first_name}[{p2.national_id}] : "
                    )
                    .strip()
                    .replace(" ", "")
                )
                # üÖ± Valide le format
                if s in ("1-0", "0-1", "0.5-0.5"):
                    a, b = map(float, s.split("-"))
                    break
                print("‚ùå Exemple valide : 1-0, 0-1 ou 0.5-0.5")

            # üÖ≤ Enregistre l‚Äôentr√©e pour le traitement et pour le r√©cap
            results.append((num - 1, i - 1, a, b))
            recap.append((p1, p2, a, b))

        # 8Ô∏è‚É£ Enregistrement des scores et cl√¥ture du round
        tour.record_results(results)
        self._save(tour)

        # 9Ô∏è‚É£ Affichage du r√©capitulatif des scores saisis
        print(f"\n--- R√©capitulatif du round {num} ---")
        for p1, p2, a, b in recap:
            print(
                f"{p1.last_name} {p1.first_name} {a} - {b} {p2.last_name} {p2.first_name}"
            )

        # üîü Confirmation et conseil pour la suite
        print("\nüíæ Scores enregistr√©s.")
        print("üí° Utilisez l'option 8 du menu Tournoi pour d√©marrer le round suivant.")

    # -----------------------
    #   ROUND SUIVANT
    # -----------------------

    def start_next_round(self):
        """D√©marre le round suivant du tournoi en cours."""

        # 1Ô∏è‚É£ Affichage de l‚Äôen‚Äët√™te pour guider l‚Äôutilisateur¬∑rice
        print("\n--- D√©marrage du round suivant ---")

        # 2Ô∏è‚É£ S√©lection du tournoi sur lequel agir
        tour = self._choose("d√©marrer le round suivant")
        if not tour:  # si aucun tournoi s√©lectionn√© ou annulation
            return

        # 3Ô∏è‚É£ Emp√™che de lancer un round si le tournoi est d√©j√† termin√©
        if tour.status == "termin√©":
            print(f"‚ùå Impossible‚ÄØ: le tournoi '{tour.name}' est d√©j√† termin√©.")
            return

        # 4Ô∏è‚É£ V√©rification que le round pr√©c√©dent est bien cl√¥tur√©
        #    - tour.rounds[-1].end_time existe seulement si on a d√©j√† jou√© et ferm√© un round
        if tour.rounds and not tour.rounds[-1].end_time:
            print("‚ö†Ô∏è  Il faut cl√¥turer le round en cours avant de d√©marrer le suivant.")
            return

        # 5Ô∏è‚É£ V√©rifie qu‚Äôon n‚Äôa pas d√©j√† atteint le nombre maximal de rounds
        if tour.current_round_index >= tour.total_rounds:
            print("‚ÑπÔ∏è  Tous les rounds ont d√©j√† √©t√© jou√©s.")
            return

        # 6Ô∏è‚É£ Tout est OK ‚Üí on lance le nouveau round, on sauvegarde et on notifie
        tour.start_next_round()
        self._save(tour)
        print("üèÅ Nouveau round d√©marr√©.")

    # -----------------------
    #   CLASSEMENT
    # -----------------------

    def show_leaderboard(self):
        """Affiche le classement des joueurs du tournoi."""

        # 1Ô∏è‚É£ Recharge tous les tournois pour s‚Äôassurer d‚Äôavoir
        #    les derni√®res infos et que les Player.registry
        #    est √† jour (remappage des national_id ‚Üí Player)
        self.reload_tournaments()

        # 2Ô∏è‚É£ Affiche un titre et demande √† l‚Äôutilisateur¬∑rice
        #    de choisir le tournoi dont il veut voir le classement
        print("\n--- Affichage du classement ---")
        tour = self._choose("consulter le classement")
        if not tour:  # si aucune s√©lection ou annulation
            return

        # 3Ô∏è‚É£ D√©l√®gue l‚Äôaffichage du classement √† la vue console
        ConsoleView.show_leaderboard(tour)

    # -----------------------
    #   RAPPORTS
    # -----------------------

    # -------- Joueurs inscrits √† au moins un tournoi --------

    def list_registered_players(self):
        """Affiche les joueurs inscrits √† un tournoi."""
        # 1Ô∏è‚É£ Affichage de l‚Äôen‚Äët√™te pour informer l‚Äôutilisateur¬∑rice
        print("\n--- Joueurs inscrits √† un tournoi ---")

        # 2Ô∏è‚É£ Collecte des IDs uniques de joueurs inscrits dans n‚Äôimporte quel tournoi
        ids = set()
        for t in self._tours:
            for p in t.players:
                ids.add(p.national_id)

        # 3Ô∏è‚É£ Si aucun ID n‚Äôa √©t√© trouv√© ‚Üí pas de joueurs inscrits
        if not ids:
            print("\nAucun joueur inscrit √† un tournoi.\n")
            return

        # 4Ô∏è‚É£ Reconstruction de la liste d‚Äôobjets Player √† partir du registry
        #    On ne garde que les joueurs dont l‚ÄôID est dans la liste pr√©c√©dente
        registered = [p for p in Player.registry if p.national_id in ids]

        # 5Ô∏è‚É£ Tri alphab√©tique : d‚Äôabord par nom de famille, puis par pr√©nom
        registered.sort(key=lambda p: (p.last_name, p.first_name))

        # 6Ô∏è‚É£ Affichage d√©taill√© via la vue console
        print("\n--- Joueurs inscrits √† un tournoi ---")
        ConsoleView.show_players(registered)

        # 7Ô∏è‚É£ Pr√©paration des donn√©es pour un √©ventuel export
        #    - rows : liste de listes [Nom, Pr√©nom, ID] pour chaque joueur
        rows = [[p.last_name, p.first_name, p.national_id] for p in registered]
        headers = ["Nom", "Pr√©nom", "ID"]

        # 8Ô∏è‚É£ Proposition d‚Äôexport (CSV, JSON‚Ä¶) en appelant la m√©thode d‚Äôaide
        self._ask_export(rows, headers, "joueurs_inscrits")

    # ---------- Liste des tournois ----------

    def _pick_tournament(self, action):
        """
        R√©cup√®re un tournoi en d√©l√©guant √† la m√©thode _choose.
        action : verbe d√©crivant ce qu‚Äôon veut faire (ex. "modifier", "supprimer", etc.)
        Retourne l‚Äôobjet Tournament s√©lectionn√© ou None.
        """
        # 1Ô∏è‚É£ On appelle _choose en passant le m√™me ‚Äúaction‚Äù :
        #    _choose affiche la liste des tournois et lit la saisie de l‚Äôutilisateur¬∑rice.
        # 2Ô∏è‚É£ _choose renvoie soit un objet Tournament, soit None en cas d‚Äôerreur/annulation.
        return self._choose(action)

    # ---------- Nom/dates tournoi ----------

    def show_tournament_header(self):
        """Affiche le nom et les dates d'un tournoi."""

        # 1Ô∏è‚É£ Affiche un titre pour guider l‚Äôutilisateur¬∑rice
        print("\n=== S√©lectionner un tournoi pour afficher les d√©tails ===")

        # 2Ô∏è‚É£ Demande de choisir un tournoi via _pick_tournament (alias de _choose)
        tour = self._pick_tournament("consulter")
        #    _pick_tournament affiche la liste et retourne l‚Äôobjet ou None
        if tour:
            # 3Ô∏è‚É£ Si un tournoi est bien s√©lectionn√©, on affiche son nom et ses dates
            print(f"\n{tour.name} ‚Äî {tour.start_date} ‚Üí {tour.end_date}\n")

    # ---------- Liste joueurs √† un tournoi ----------

    def show_tournament_players(self):
        """Affiche les joueurs d'un tournoi."""

        # 1Ô∏è‚É£ Affiche un titre pour guider l‚Äôutilisateur¬∑rice
        print("\n=== S√©lectionner un tournoi pour afficher les joueurs ===")

        # 2Ô∏è‚É£ Demande √† l‚Äôutilisateur de choisir un tournoi via _pick_tournament (alias de _choose)
        tour = self._pick_tournament("afficher joueurs")
        if not tour:  # Annule si aucun tournoi n‚Äôest s√©lectionn√© ou en cas d‚Äôerreur
            return

        # 3Ô∏è‚É£ Affiche l‚Äôen‚Äët√™te du listing des joueurs pour ce tournoi
        print(f"\n--- Joueurs du tournoi {tour.name} ---")

        # 4Ô∏è‚É£ Trie alphab√©tiquement la liste des joueurs par nom puis pr√©nom
        order = sorted(tour.players, key=lambda p: (p.last_name, p.first_name))

        # 5Ô∏è‚É£ D√©l√®gue l‚Äôaffichage d√©taill√© √† la vue console (nom, ID, date de naissance)
        ConsoleView.show_players(order)

        # 6Ô∏è‚É£ Pr√©pare les donn√©es pour une √©ventuelle exportation
        print("\n--- Exportation ---")
        rows = [[p.last_name, p.first_name, p.national_id] for p in order]
        headers = ["Nom", "Pr√©nom", "ID"]

        # 7Ô∏è‚É£ Appelle la m√©thode d‚Äôaide √† l‚Äôexport (_ask_export) avec les donn√©es et un nom de fichier bas√© sur le tournoi
        self._ask_export(rows, headers, f"joueurs_{tour.name}")

    # ---------- Rounds/Matches tournoi ----------

    def show_all_rounds_and_matches(self):
        """Affiche tous les rounds et matches d'un tournoi."""

        # 1Ô∏è‚É£ En‚Äët√™te pour guider l‚Äôutilisateur¬∑rice
        print("\n=== S√©lectionner un tournoi pour afficher les rounds et matches ===")

        # 2Ô∏è‚É£ Choix du tournoi via _pick_tournament (alias de _choose)
        tour = self._pick_tournament("afficher rounds & matches")
        #    Si aucun tournoi choisi ou erreur de saisie, on arr√™te
        if not tour or not tour.rounds:
            print("Aucun round disponible.")
            return

        # 3Ô∏è‚É£ Parcours de chaque round existant et affichage
        for idx, rnd in enumerate(tour.rounds, 1):
            print(f"\nü•ä Round {idx} :")
            # 4Ô∏è‚É£ Pour chaque match du round, on r√©cup√®re joueurs et scores
            for m in rnd.matches:
                p1, p2 = m.players
                s1, s2 = m.scores
                # 5Ô∏è‚É£ Affichage format√© : Nom Pr√©nom[ID] score1 - score2 Nom Pr√©nom[ID]
                print(
                    f"{p1.last_name} {p1.first_name}[{p1.national_id}] "
                    f"{s1} - {s2} {p2.last_name} {p2.first_name}[{p2.national_id}]"
                )
        print()

        # 6Ô∏è‚É£ Pr√©paration des donn√©es pour un export √©ventuel
        rows = []
        for idx, rnd in enumerate(tour.rounds, 1):
            for m in rnd.matches:
                p1, p2 = m.players
                s1, s2 = m.scores
                # Chaque ligne contient : Round, Joueur1, Joueur2, Score1, Score2
                rows.append(
                    [
                        f"Round {idx}",
                        f"{p1.last_name} {p1.first_name}",
                        f"{p2.last_name} {p2.first_name}",
                        s1,
                        s2,
                    ]
                )
        headers = ["Round", "Joueur 1", "Joueur 2", "Score 1", "Score 2"]
        # 7Ô∏è‚É£ Nom de fichier bas√© sur le nom du tournoi (minuscules, underscores)
        name = f"rounds_{tour.name.lower().replace(' ', '_')}"
        # 8Ô∏è‚É£ Appel √† la m√©thode d‚Äôexport pour proposer CSV/JSON‚Ä¶
        self._ask_export(rows, headers, name)

    # -----------------------
    #   EXPORT (CSV ou HTML)
    # -----------------------

    def _export(self, rows, headers, filename, fmt="csv"):
        """
        Exporte des donn√©es (rows, headers) vers un fichier CSV ou HTML.
        rows     : liste de listes, chaque sous-liste est une ligne de donn√©es
        headers  : liste de cha√Ænes pour les en-t√™tes de colonnes
        filename : nom de base du fichier (sans extension)
        fmt      : format d'export, "csv" ou autre (HTML par d√©faut)
        """
        # 1Ô∏è‚É£ Construction du chemin complet vers le fichier d‚Äôexport
        #    - EXPORT_DIR est le dossier d√©di√© aux exports
        #    - on ajoute l‚Äôextension selon fmt ("csv" ou autre)
        path = EXPORT_DIR / f"{filename}.{fmt}"

        # 2Ô∏è‚É£ Choix du format CSV
        if fmt == "csv":
            # üÖ∞ Ouverture du fichier en mode √©criture textuelle
            #    - newline="" pour √©viter les lignes vides entre chaque √©criture sous Windows
            #    - encoding="utf-8" pour conserver les accents
            with path.open("w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                # üÖ± √âcriture de la ligne d‚Äôen‚Äët√™tes
                writer.writerow(headers)
                # üÖ≤ √âcriture de toutes les lignes de donn√©es
                writer.writerows(rows)
        else:
            # 3Ô∏è‚É£ Autre format ‚Üí cr√©ation d‚Äôun tableau HTML simple
            with path.open("w", encoding="utf-8") as f:
                # üÖ∞ D√©but du tableau et ligne d‚Äôen‚Äët√™tes
                f.write("<table border='1'>\n<tr>")
                for h in headers:
                    f.write(f"<th>{h}</th>")
                f.write("</tr>\n")
                # üÖ± Lignes de donn√©es : une <tr> par ligne, avec autant de <td> que de colonnes
                for row in rows:
                    cells = "".join(f"<td>{c}</td>" for c in row)
                    f.write(f"<tr>{cells}</tr>\n")
                # üÖ≤ Fin du tableau
                f.write("</table>")

        # 4Ô∏è‚É£ Confirmation √† l‚Äôutilisateur¬∑rice
        #    .resolve() renvoie le chemin absolu pour que ce soit clair o√π trouver le fichier
        print(f"‚úì Export√© dans : {path.resolve()}")

    def _ask_export(self, rows, headers, default_name):
        """
        Propose √† l‚Äôutilisateur¬∑rice d‚Äôexporter un rapport et lance l‚Äôexport si valid√©.
        rows         : liste de lignes (list de listes) √† exporter
        headers      : liste d‚Äôen‚Äët√™tes de colonnes
        default_name : nom de fichier sans extension
        """
        # 1Ô∏è‚É£ On demande si l‚Äôutilisateur¬∑rice souhaite exporter le rapport
        if input("\nExporter ce rapport ? (o/N) ").lower() == "o":
            # 2Ô∏è‚É£ Choix du format : CSV ou HTML
            fmt = input("Format csv ou html ? ").lower()
            # 3Ô∏è‚É£ Validation du format : si l‚Äôentr√©e n‚Äôest pas "csv" ou "html", on utilise "csv" par d√©faut
            if fmt not in ("csv", "html"):
                fmt = "csv"
            # 4Ô∏è‚É£ Appel √† la m√©thode d‚Äôexport avec le format choisi
            self._export(rows, headers, default_name, fmt)

    # -----------------------
    #   RECHARGER TOURNOIS DISQUE
    # -----------------------

    def reload_tournaments(self):
        """Recharge la liste des tournois depuis les fichiers JSON."""

        # 1Ô∏è‚É£ Appel de la m√©thode _load()
        #    - _load() vide d‚Äôabord la liste interne (_tours)
        #    - puis parcourt tous les fichiers JSON dans DATA_DIR
        #    - pour recharger chaque Tournament valide en m√©moire
        self._load()

    def update_player_references(self, updated_player):
        """
        Pour chaque tournoi charg√©, remplace l'ancien objet Player
        (m√™me national_id) par updated_player dans tour.players.
        """
        # 1Ô∏è‚É£ Parcours de tous les tournois en m√©moire
        for tour in self._tours:
            changed = False  # drapeau pour savoir si on a fait un remplacement

            # 2Ô∏è‚É£ Recherche du joueur √† mettre √† jour dans la liste tour.players
            for idx, p in enumerate(tour.players):
                # üÖ∞ Si l‚ÄôID national correspond √† celui du joueur mis √† jour
                if p.national_id == updated_player.national_id:
                    # üÖ± On remplace l‚Äôancienne instance par la nouvelle
                    tour.players[idx] = updated_player
                    changed = True  # on note qu‚Äôil y a eu une modification

            # 3Ô∏è‚É£ Si au moins un remplacement a eu lieu, on persiste le tournoi
            if changed:
                # sauvegarde pour conserver les nouvelles r√©f√©rences Player‚Üítour
                self._save(tour)
