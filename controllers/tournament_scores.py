"""
Module tournament_scores
G√®re la saisie des scores pour le round en cours d'un tournoi.
"""

from .tournament_controller_base import TournamentController as BaseTournamentController


class TournamentController(BaseTournamentController):
    """
    Sous-contr√¥leur pour la saisie et l'enregistrement des scores.
    """

    # -----------------------
    #   SAISIE SCORES
    # -----------------------

    # ------- Saisie et enregistrement des scores du round en cours -------
    def enter_scores_current_round(self):
        """
        Saisit les scores du round en cours d'un tournoi.
        √âtapes :
        1. S√©lectionne le tournoi
        2. V√©rifie que les scores peuvent √™tre saisis
        3. Si le round est d√©j√† termin√©, affiche le r√©capitulatif
        4. Sinon, collecte les scores pour chaque match
        5. Enregistre et affiche le r√©sum√© des r√©sultats
        """
        # 1Ô∏è‚É£ Affiche un titre pour signaler la saisie des scores
        print("\n--- Saisie des scores du round en cours ---")

        # 2Ô∏è‚É£ S√©lection du tournoi
        tournament = self._choose("saisir les scores")
        if not tournament:  # üÖ∞ Annule si aucun tournoi s√©lectionn√©
            return

        # 3Ô∏è‚É£ V√©rifie si les scores peuvent √™tre saisis (tournoi en cours, etc.)
        if not self._can_enter_scores(tournament):
            return

        # 4Ô∏è‚É£ R√©cup√®re le round en cours et son num√©ro
        rnd, num = tournament.rounds[-1], tournament.current_round_index

        # 5Ô∏è‚É£ V√©rifie si le round est d√©j√† termin√©, si oui on sort
        if self._is_round_finished(rnd, num):
            return

        # 6Ô∏è‚É£ Collecte les scores saisis pour chaque match du round
        results, recap = self._collect_scores(rnd, num, tournament.name)

        # 7Ô∏è‚É£ Enregistre les r√©sultats dans le tournoi
        tournament.record_results(results)

        # 8Ô∏è‚É£ Sauvegarde l'√©tat mis √† jour
        self._save(tournament)

        # 9Ô∏è‚É£ Affiche le r√©capitulatif des scores saisis
        self._display_scores_recap(recap, num)

    # ------- V√©rification des conditions pour saisir les scores -------
    def _can_enter_scores(self, tournament):
        """
        V√©rifie si les scores peuvent √™tre saisis pour le tournoi donn√©.
        Conditions :
        - Le tournoi doit √™tre d√©marr√©
        - Il ne doit pas √™tre termin√©
        Retourne True si la saisie des scores est possible, sinon False.
        """
        # 1Ô∏è‚É£ V√©rifie si le tournoi n'a pas encore d√©marr√©
        if tournament.status == "non d√©marr√©":
            print("\n‚ùå Impossible : Le tournoi n'a pas encore d√©marr√©.")
            print("üí° Utilisez l'option 6 du menu Tournoi pour d√©marrer le tournoi.")
            return False

        # 2Ô∏è‚É£ V√©rifie si le tournoi est d√©j√† termin√©
        if tournament.status == "termin√©":
            print(f"\n‚ÑπÔ∏è  Le tournoi '{tournament.name}' est d√©j√† termin√©.")
            return False

        # 3Ô∏è‚É£ Si les conditions sont respect√©es, on peut saisir les scores
        return True

    # ------- V√©rifie si le round est d√©j√† termin√© et affiche les scores -------
    def _is_round_finished(self, rnd, num):
        """
        V√©rifie si un round est d√©j√† termin√©.
        - Si termin√©, affiche un r√©capitulatif des scores
        et retourne True.
        - Sinon retourne False.
        """
        # 1Ô∏è‚É£ Si le round n'a pas de end_time, il n'est pas termin√©
        if not rnd.end_time:
            return False

        # 2Ô∏è‚É£ Affiche un message indiquant que le round est d√©j√† jou√©
        print("\nü•ä Round d√©j√† jou√©.")
        print("üí° Utilisez l'option 8 du menu Tournoi pour d√©marrer le round suivant.")

        # 3Ô∏è‚É£ Affiche le r√©capitulatif des scores du round termin√©
        print(f"\n--- R√©capitulatif du round {num} ---")
        for m in rnd.matches:
            p1, p2 = m.players
            s1, s2 = m.scores
            print(
                f"{p1.last_name} {p1.first_name} {s1} - {s2} {p2.last_name} {p2.first_name}"
            )

        # 4Ô∏è‚É£ Retourne True pour indiquer que le round est d√©j√† cl√¥tur√©
        return True

    # ------- Collecte et enregistre les scores des matchs d‚Äôun round -------
    def _collect_scores(self, rnd, num, tournament_name):
        """
        Collecte les scores pour chaque match du round en cours.
        √âtapes :
        1. Affiche un en-t√™te avec le nom du tournoi et le num√©ro du round
        2. Pour chaque match, demande un score valide (1-0, 0-1, 0.5-0.5)
        3. Construit deux listes :
            - results : tuples pr√™ts √† √™tre enregistr√©s
            - recap : tuples pour afficher le r√©capitulatif
        Retourne (results, recap)
        """
        # 1Ô∏è‚É£ Affiche le titre et les instructions de saisie
        print(f"\n===== Score du tournoi {tournament_name} =====")
        print("üìå Rappel : format 1-0, 0-1, 0.5-0.5 (1 victoire, 0 d√©faite, 0.5 nul)")
        print(f"\nü•ä Round {num}\n")

        results = []  # contiendra les scores sous une forme pr√™te pour record_results
        recap = []  # contiendra les donn√©es pour affichage final

        # 2Ô∏è‚É£ Parcourt les matchs du round
        for i, m in enumerate(rnd.matches, 1):
            p1, p2 = m.players
            while True:
                # üÖ∞ Demande la saisie du score
                s = (
                    input(
                        f"{p1.last_name} {p1.first_name}[{p1.national_id}] VS "
                        f"{p2.last_name} {p2.first_name}[{p2.national_id}] : "
                    )
                    .strip()
                    .replace(" ", "")
                )

                # üÖ± V√©rifie le format de la saisie
                if s in ("1-0", "0-1", "0.5-0.5"):
                    a, b = map(float, s.split("-"))
                    break

                # üÖ≤ Message d'erreur si format incorrect
                print("‚ùå Exemple valide : 1-0, 0-1 ou 0.5-0.5")

            # üÖ≥ Ajoute le r√©sultat au tableau results et recap
            results.append((num - 1, i - 1, a, b))
            recap.append((p1, p2, a, b))

        return results, recap

    # ------- Demande et valide la saisie du score pour un match -------
    def _ask_match_score(self, match):
        """
        Demande √† l'utilisateur¬∑rice de saisir un score valide pour un match.
        Format accept√© :
        - 1-0  (le premier joueur gagne)
        - 0-1  (le second joueur gagne)
        - 0.5-0.5 (match nul)
        Retourne un tuple (score_joueur1, score_joueur2) sous forme de float.
        """
        # 1Ô∏è‚É£ R√©cup√®re les deux joueurs du match
        p1, p2 = match.players

        # 2Ô∏è‚É£ Boucle jusqu'√† obtenir un score valide
        while True:
            # üÖ∞ Demande la saisie du score
            s = (
                input(
                    f"{p1.last_name} {p1.first_name}[{p1.national_id}] VS "
                    f"{p2.last_name} {p2.first_name}[{p2.national_id}] : "
                )
                .strip()
                .replace(" ", "")
            )

            # üÖ± V√©rifie que la saisie correspond √† l'un des formats valides
            if s in ("1-0", "0-1", "0.5-0.5"):
                return map(float, s.split("-"))

            # üÖ≤ Affiche un message d'erreur si le format est incorrect
            print("‚ùå Exemple valide : 1-0, 0-1 ou 0.5-0.5")

    # ------- Affichage du r√©capitulatif des scores d‚Äôun round -------
    def _display_scores_recap(self, recap, num):
        """
        Affiche le r√©capitulatif des scores saisis pour un round.
        Param√®tres :
        - recap : liste de tuples (p1, p2, score1, score2)
        - num   : num√©ro du round (1-based)
        """
        # 1Ô∏è‚É£ Affiche le titre du r√©capitulatif
        print(f"\n--- R√©capitulatif du round {num} ---")

        # 2Ô∏è‚É£ Parcourt la liste recap et affiche chaque score
        for p1, p2, a, b in recap:
            print(
                f"{p1.last_name} {p1.first_name} {a} - {b} "
                f"{p2.last_name} {p2.first_name}"
            )

        # 3Ô∏è‚É£ Confirmation de l'enregistrement
        print("\nüíæ Scores enregistr√©s.")
        print("üí° Utilisez l'option 8 du menu Tournoi pour d√©marrer le round suivant.")
