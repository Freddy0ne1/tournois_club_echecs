"""
Module tournament_creation
G√®re la cr√©ation d'un nouveau tournoi (saisie, validation et enregistrement).
"""

from datetime import datetime
from models.tournament import Tournament
from .tournament_controller_base import (
    TournamentController as BaseTournamentController,
    MAX_ATTEMPTS,
)


# -----------------------
#   CR√âATION TOURNOI
# -----------------------


class TournamentController(BaseTournamentController):
    """Ajoute les m√©thodes de cr√©ation de tournoi."""

    # -----------------------
    #   CR√âATION TOURNOI
    # -----------------------

    # ------- √âtapes interactives pour cr√©er un nouveau tournoi -------
    def create_tournament(self):
        """
        Cr√©e un nouveau tournoi en interrogeant l'utilisateur¬∑rice √©tape par √©tape :
        1. Nom
        2. Lieu
        3. Date de d√©but et de fin
        4. Description
        5. Nombre de rounds
        - V√©rifie chaque saisie et annule si l'une d'elles √©choue.
        - Enregistre ensuite le tournoi et affiche une confirmation.
        """

        # 1Ô∏è‚É£ Affiche un en-t√™te indiquant la cr√©ation d'un tournoi
        print("\n=== Cr√©ation d'un tournoi ===\n")

        # 2Ô∏è‚É£ Demande le nom du tournoi (obligatoire)
        name = self._ask_required_field("Nom du tournoi : ")
        if name is None:  # üÖ∞ Annule si la saisie est vide ou abandonn√©e
            return

        # 3Ô∏è‚É£ Demande le lieu du tournoi (obligatoire)
        place = self._ask_required_field("Lieu : ")
        if place is None:
            return

        # 4Ô∏è‚É£ Demande la date de d√©but (format jj/mm/aaaa)
        start_date = self._ask_date("Date d√©but (jj/mm/aaaa) : ")
        if start_date is None:
            return

        # 5Ô∏è‚É£ Demande la date de fin et s'assure qu'elle est post√©rieure √† la date de d√©but
        end_date = self._ask_end_date("Date fin (jj/mm/aaaa) : ", start_date)
        if end_date is None:
            return

        # 6Ô∏è‚É£ Demande une description du tournoi
        description = self._ask_required_field("Description         : ")
        if description is None:
            return

        # 7Ô∏è‚É£ Demande le nombre de rounds (par d√©faut 4 si vide)
        total_rounds = self._ask_rounds()

        # 8Ô∏è‚É£ Cr√©ation et enregistrement du tournoi
        tournament = Tournament(
            name, place, start_date, end_date, description, total_rounds
        )
        self._tournaments.append(tournament)

        # 9Ô∏è‚É£ Sauvegarde et affichage de confirmation
        self._save_and_confirm(tournament)

    # ------- Demande d'un champ obligatoire (non vide) -------
    def _ask_required_field(self, prompt):
        """
        Demande un champ obligatoire √† l'utilisateur¬∑rice.
        - Utilise _input_nonempty pour s'assurer que la r√©ponse n'est pas vide.
        - Retourne la valeur saisie ou None si l'utilisateur abandonne apr√®s
        plusieurs tentatives.
        """
        # 1Ô∏è‚É£ Appelle _input_nonempty avec le message d'invite fourni
        return self._input_nonempty(prompt)

    # ------- Demande et validation d'une date -------
    def _ask_date(self, prompt):
        """
        Demande une date au format jj/mm/aaaa.
        - Utilise _input_date pour valider la saisie et g√©rer les tentatives.
        - Retourne la date saisie (cha√Æne) ou None si l'utilisateur abandonne.
        """
        # 1Ô∏è‚É£ Appelle _input_date pour effectuer la saisie et la validation
        return self._input_date(prompt)

    # ------- Demande et validation d'une date de fin -------
    def _ask_end_date(self, prompt, start_date):
        """
        Demande une date de fin au format jj/mm/aaaa en s'assurant qu'elle
        est post√©rieure ou √©gale √† la date de d√©but.
        - Autorise MAX_ATTEMPTS tentatives.
        - Retourne la date valide ou None si abandon ou trop d'erreurs.
        """
        # 1Ô∏è‚É£ Boucle sur un nombre limit√© de tentatives
        for attempt in range(1, MAX_ATTEMPTS + 1):

            # üÖ∞ Demande une saisie de date en utilisant _input_date
            saisie = self._input_date(prompt)
            if saisie is None:  # üÖ± Annulation directe si la saisie √©choue
                return None

            # 2Ô∏è‚É£ Convertit les dates en objets datetime pour comparer
            dt_start = datetime.strptime(start_date, "%d/%m/%Y")
            dt_end = datetime.strptime(saisie, "%d/%m/%Y")

            # 3Ô∏è‚É£ V√©rifie que la date de fin est post√©rieure ou √©gale √† la date de d√©but
            if dt_end >= dt_start:
                return saisie  # üÖ∞ Retourne la date valide

            # 4Ô∏è‚É£ Si la saisie est incorrecte, affiche un message d'erreur et r√©essaie
            print(
                f"\n‚ùå La date de fin doit √™tre ‚â• date de d√©but ({attempt}/{MAX_ATTEMPTS}).\n"
            )

        # 5Ô∏è‚É£ Trop d'√©checs ‚Üí abandon de l'op√©ration
        print("\n‚ùå Nombre de tentatives d√©pass√©. Op√©ration annul√©e.")
        return None

    # ------- Demande du nombre de tours pour un tournoi -------
    def _ask_rounds(self):
        """
        Demande √† l'utilisateur¬∑rice le nombre de tours pour le tournoi.
        - Si aucune valeur n'est saisie, utilise 4 par d√©faut.
        - V√©rifie que la valeur saisie est un entier positif.
        - R√©p√®te la demande tant qu'une valeur correcte n'est pas fournie.
        """
        # 1Ô∏è‚É£ Boucle infinie jusqu'√† obtenir une saisie correcte
        while True:
            # üÖ∞ Lecture de la saisie et suppression des espaces superflus
            nb = input("Nombre de tours (d√©faut 4) : ").strip()

            # 2Ô∏è‚É£ Si l'utilisateur ne saisit rien ‚Üí valeur par d√©faut 4
            if nb == "":
                return 4

            # 3Ô∏è‚É£ Si la saisie est un entier positif ‚Üí on retourne ce nombre
            if nb.isdigit() and int(nb) > 0:
                return int(nb)

            # 4Ô∏è‚É£ Sinon, message d'erreur et on redemande
            print("Entrez un entier positif ou laissez vide pour 4.")

    # ------- Sauvegarde et confirmation apr√®s cr√©ation d'un tournoi -------
    def _save_and_confirm(self, tournament):
        """
        Sauvegarde le tournoi nouvellement cr√©√© et affiche un r√©sum√©.
        - Utilise la m√©thode _save() pour enregistrer les donn√©es.
        - Affiche ensuite les informations principales du tournoi.
        """
        # 1Ô∏è‚É£ Sauvegarde imm√©diate des donn√©es du tournoi dans un fichier ou une base locale
        self._save(tournament)

        # 2Ô∏è‚É£ Affiche une confirmation visuelle de cr√©ation r√©ussie
        print("\n‚úÖ Tournoi cr√©√©.\n")

        # 3Ô∏è‚É£ Affiche un r√©capitulatif clair des donn√©es du tournoi
        print(f"--- Informations du tournoi '{tournament.name}' ---\n")
        print(f"Lieu             : {tournament.place}")
        print(f"Dates            : {tournament.start_date} ‚Üí {tournament.end_date}")
        print(f"Description      : {tournament.description}")
        print(f"Nombre de tours  : {tournament.total_rounds}")
