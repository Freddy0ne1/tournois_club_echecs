"""Contr√¥leur principal ‚Äî partie commune et utilitaires."""

# import csv
import json


from pathlib import Path

from views.display_message import DisplayMessage
from views.console_view import ConsoleView
from models.tournament import Tournament


# -----------------------
#   Constantes globales
# -----------------------

# 2Ô∏è‚É£ D√©finition des chemins principaux du projet
#    - Path(__file__)  : chemin vers le fichier actuel
#    - .resolve()      : convertit en chemin absolu sans liens symboliques
#    - .parents[1]     : remonte d'un dossier (racine du projet)
BASE_DIR = Path(__file__).resolve().parents[1]

# 3Ô∏è‚É£ Dossiers pour les donn√©es et les exports
#    - DATA_DIR   : r√©pertoire contenant les fichiers JSON des tournois
#    - EXPORT_DIR : r√©pertoire o√π seront g√©n√©r√©s les fichiers export√©s (rapports, CSV‚Ä¶)
DATA_DIR = BASE_DIR / "data" / "tournaments"
EXPORT_DIR = BASE_DIR / "export"


def create_export_directory():
    """
    Cr√©e le dossier d'export pour les rapports.
    √âtapes :
    1. V√©rifie si le dossier existe d√©j√†
    2. Si non, le cr√©e
    """
    # 1Ô∏è‚É£ V√©rifie si le dossier existe d√©j√†
    if not EXPORT_DIR.exists():
        # 2Ô∏è‚É£ Si non, le cr√©e
        EXPORT_DIR.mkdir(parents=True, exist_ok=True)


class TournamentControllerBase:
    """
    Contr√¥leur principal pour la gestion des tournois.
    Responsabilit√©s :
      - Cr√©er, modifier, supprimer les tournois
      - D√©marrer et g√©rer les rounds
      - G√©rer l'inscription des joueurs
      - Exporter ou afficher des rapports
    """

    def __init__(self):
        """
        Initialise un contr√¥leur de tournois.
        √âtapes :
          1. Initialise une liste interne pour stocker les tournois
          2. Charge les tournois existants depuis DATA_DIR
        """
        # 1Ô∏è‚É£ Cr√©e une liste interne pour stocker les objets Tournament
        self._tournaments = []

        # 2Ô∏è‚É£ Charge automatiquement les tournois existants
        #    depuis DATA_DIR via la m√©thode _load()
        self._load()

    # -----------------------
    #   S√âLECTION D'UN TOURNOI
    # -----------------------

    def _choose(self, action, tournament_list=None):
        """
        Affiche une liste de tournois (par d√©faut self._tournaments) et demande √†
        l'utilisateur de choisir un index pour effectuer une action donn√©e.

        Param√®tres :
        - action          : texte affich√© pour pr√©ciser l'action (ex. "modifier", "supprimer")
        - tournament_list : liste de tournois √† afficher (optionnel)

        Retour :
        - L'objet Tournament s√©lectionn√©, ou None si annulation ou saisie invalide.
        """
        # 1Ô∏è‚É£ Utilise la liste fournie ou la liste par d√©faut
        tournaments = (
            tournament_list if tournament_list is not None else self._tournaments
        )

        # 2Ô∏è‚É£ Si aucun tournoi n'est disponible, informe l'utilisateur et quitte
        if not tournaments:
            DisplayMessage.display_tournament_not_saved()
            return None

        # 3Ô∏è‚É£ Affiche la liste des tournois via ConsoleView (tri√©e par nom)
        tournaments = sorted(tournaments, key=lambda t: t.name.lower())
        ConsoleView.show_tournaments(tournaments)

        # 4Ô∏è‚É£ Demande √† l'utilisateur de choisir un tournoi
        choice = input(f"\nNum√©ro du tournoi pour {action} : ").strip()

        # 5Ô∏è‚É£ V√©rifie que la saisie est un nombre valide
        if not choice.isdigit():
            DisplayMessage.display_not_isdigit()
            return None

        idx = int(choice)
        if 1 <= idx <= len(tournaments):
            # 6Ô∏è‚É£ Retourne le tournoi s√©lectionn√©
            return tournaments[idx - 1]

        # 7Ô∏è‚É£ Si l'index est hors plage
        DisplayMessage.display_out_of_range()
        return None

    # -----------------------
    #   CHARGEMENT DES TOURNOIS
    # -----------------------

    def _load(self):
        """
        Charge tous les tournois valides √† partir des fichiers JSON pr√©sents
        dans le r√©pertoire DATA_DIR (data/tournaments).
        √âtapes :
        1. Vide la liste interne _tournaments
        2. V√©rifie l'existence du dossier de donn√©es
        3. Parcourt les fichiers JSON et tente de charger chaque tournoi
            - Ignore les fichiers invalides ou corrompus avec un avertissement
        """
        # 1Ô∏è‚É£ Vide la liste interne des tournois avant de recharger
        self._tournaments.clear()

        # 2Ô∏è‚É£ Parcourt tous les fichiers JSON pr√©sents dans le dossier
        for file in DATA_DIR.glob("*.json"):
            try:
                # üÖ∞ Tente de charger le tournoi gr√¢ce √† Tournament.load()
                tournament = Tournament.load(file.name)
            except (ValueError, json.JSONDecodeError):
                # üÖ± En cas d'erreur (JSON invalide ou autre probl√®me), on ignore le fichier
                DisplayMessage.display_load_tournament_failed(file.name)
            else:
                # üÖ≤ Si le fichier est valide, on ajoute le tournoi dans la liste
                self._tournaments.append(tournament)

    # -----------------------
    #   SAUVEGARDE D'UN TOURNOI
    # -----------------------

    def _save(self, tournament):
        """
        Sauvegarde un tournoi sp√©cifique dans le r√©pertoire data/tournaments.
        √âtapes :
        1. Appelle la m√©thode save() de l'objet Tournament concern√©
            (c'est la classe Tournament qui g√®re la s√©rialisation JSON).
        """
        # 1Ô∏è‚É£ D√©l√®gue la sauvegarde de l'objet Tournament √† sa propre m√©thode save()
        tournament.save()

    # -----------------------
    #   RECHARGER TOURNOIS DISQUE
    # -----------------------

    # ------- Recharge en m√©moire tous les tournois depuis les fichiers JSON -------
    def reload_tournaments(self):
        """
        Recharge la liste des tournois √† partir des fichiers JSON pr√©sents dans DATA_DIR.
        √âtapes :
        1. Appelle la m√©thode interne _load()
            - Vide d'abord la liste interne (_tournaments)
            - Parcourt tous les fichiers JSON dans DATA_DIR
            - Recharge chaque tournoi valide en m√©moire
        """
        # 1Ô∏è‚É£ Appelle la m√©thode _load() pour rafra√Æchir la liste des tournois
        self._load()

    # ------- Met √† jour les r√©f√©rences d'un joueur dans tous les tournois -------
    def update_player_references(self, updated_player):
        """
        Met √† jour les r√©f√©rences d'un joueur dans tous les tournois charg√©s.
        Pour chaque tournoi :
        - Recherche un joueur ayant le m√™me identifiant national
        - Remplace l'ancienne instance Player par updated_player
        - Sauvegarde le tournoi si une modification a √©t√© effectu√©e
        """
        # 1Ô∏è‚É£ Parcourt tous les tournois actuellement en m√©moire
        for tournament in self._tournaments:
            changed = False  # Drapeau indiquant si une mise √† jour a √©t√© faite

            # 2Ô∏è‚É£ Parcourt tous les joueurs inscrits dans le tournoi
            for idx, p in enumerate(tournament.players):
                # üÖ∞ V√©rifie si l'ID national correspond
                if p.national_id == updated_player.national_id:
                    # üÖ± Remplace l'ancienne instance Player par la nouvelle
                    tournament.players[idx] = updated_player
                    changed = True

            # 3Ô∏è‚É£ Si une ou plusieurs r√©f√©rences ont √©t√© mises √† jour, on sauvegarde
            if changed:
                self._save(tournament)
