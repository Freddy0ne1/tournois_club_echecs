"""
Module tournament_reports
Affiche les classements, rapports et propose l'export des donn√©es.
"""

import csv
from models.player import Player
from views.console_view import ConsoleView
from .tournament_controller_base import (
    TournamentControllerBase as TournamentReportsController,
    EXPORT_DIR,
    create_export_directory,
)


class TournamentReports(TournamentReportsController):
    """
    Sous-contr√¥leur pour l'affichage des rapports et classements,
    et la g√©n√©ration d'exports CSV/HTML.
    """

    # -----------------------
    #   CLASSEMENT / RAPPORTS / EXPORTS
    # -----------------------

    # ------- Affichage classement joueur d‚Äôun tournoi s√©lectionn√© -------
    def show_leaderboard(self):
        """
        Affiche le classement des joueurs pour un tournoi s√©lectionn√©.

        √âtapes :
        1. Recharge les tournois depuis les fichiers
        2. Filtre uniquement les tournois d√©marr√©s ou termin√©s
        3. Affiche un message s'il n'y a aucun tournoi √† afficher
        4. Permet √† l'utilisateur de s√©lectionner un tournoi
        5. Affiche le classement via la vue console
        """
        # 1Ô∏è‚É£ Recharge les tournois √† jour
        self.reload_tournaments()

        # 2Ô∏è‚É£ Ne conserve que les tournois en cours ou termin√©s (statut != "non d√©marr√©")
        eligible = sorted(
            [t for t in self._tournaments if t.status != "non d√©marr√©"],
            key=lambda t: t.name.lower(),
        )

        # 3Ô∏è‚É£ Si aucun tournoi √©ligible, affiche un message et quitte
        if not eligible:
            print("\nüîç Aucun tournoi d√©marr√© ou termin√© pour le moment.")
            print("üí° D√©marrez un tournoi pour pouvoir consulter son classement.\n")
            return

        # 4Ô∏è‚É£ Titre et s√©lection du tournoi concern√©
        print("\n--- Affichage du classement ---")
        tournament = self._choose("consulter le classement", tournament_list=eligible)
        if not tournament:
            return

        # 5Ô∏è‚É£ Affiche le classement via la vue
        ConsoleView.show_leaderboard(tournament)

    # ------- Liste de tous les joueurs inscrits √† au moins un tournoi -------
    def list_registered_players(self):
        """
        Affiche la liste de tous les joueurs inscrits √† au moins un tournoi.
        √âtapes :
        1. Affiche un titre
        2. Collecte les identifiants uniques des joueurs inscrits
        3. Si aucun joueur trouv√©, affiche un message et quitte
        4. Reconstruit la liste d'objets Player √† partir du Player.registry
        5. Trie la liste par nom puis pr√©nom
        6. Affiche les joueurs via la vue console
        7. Pr√©pare les donn√©es pour un √©ventuel export
        8. Propose l'export des donn√©es (CSV, JSON, etc.)
        """
        # 1Ô∏è‚É£ Collecte des identifiants uniques des joueurs inscrits
        ids = set()
        for t in self._tournaments:
            for p in t.players:
                ids.add(p.national_id)

        # 2Ô∏è‚É£ Si aucun joueur n'est inscrit √† aucun tournoi
        if not ids:
            print("\nAucun joueur inscrit √† un tournoi.\n")
            return

        # 3Ô∏è‚É£ Construit une liste des joueurs correspondant aux IDs collect√©s
        registered = [p for p in Player.registry if p.national_id in ids]

        # 4Ô∏è‚É£ Trie les joueurs par nom puis par pr√©nom
        registered.sort(key=lambda p: (p.last_name, p.first_name))

        # 5Ô∏è‚É£ Affiche la liste via la vue console
        print("\n--- Joueurs inscrits √† un tournoi ---")
        ConsoleView.show_players(registered)

        # 6Ô∏è‚É£ Pr√©pare les donn√©es pour un export √©ventuel
        rows = [[p.last_name, p.first_name, p.national_id] for p in registered]
        headers = ["Nom", "Pr√©nom", "ID"]

        # 7Ô∏è‚É£ Demande √† l'utilisateur s'il souhaite exporter les donn√©es
        self._ask_export(rows, headers, "joueurs_inscrits")

    # ------- S√©lection d‚Äôun tournoi via la m√©thode _choose -------
    def _pick_tournament(self, action):
        """
        Permet de s√©lectionner un tournoi en utilisant la m√©thode _choose.
        Param√®tre :
        - action : cha√Æne d√©crivant l'action (exemple : "modifier", "supprimer")
        Retour :
        - L'objet Tournament choisi ou None si annulation ou erreur.
        """

        # 1Ô∏è‚É£ Appelle la m√©thode _choose avec l'action sp√©cifi√©e.
        #    _choose se charge d'afficher la liste des tournois et de lire la saisie.
        # 2Ô∏è‚É£ Retourne directement le tournoi s√©lectionn√© (ou None).
        return self._choose(action)

    # ------- Affichage du nom et des dates d‚Äôun tournoi s√©lectionn√© -------
    def show_tournament_header(self):
        """
        Affiche uniquement le nom et les dates d'un tournoi choisi.
        √âtapes :
        1. Affiche un titre
        2. Demande √† l'utilisateur de s√©lectionner un tournoi
        3. Affiche le nom et les dates si un tournoi est s√©lectionn√©
        """
        # 1Ô∏è‚É£ Affiche un titre pour guider l'utilisateur
        print("\n=== S√©lectionner un tournoi pour afficher les d√©tails ===")

        # 2Ô∏è‚É£ Demande √† l'utilisateur de choisir un tournoi
        tournament = self._pick_tournament("consulter")

        # 3Ô∏è‚É£ Si un tournoi est bien s√©lectionn√©, affiche son nom et ses dates
        if tournament:
            print("\n--- D√©tails du tournoi s√©lectionn√© ---")
            # üÖ∞ Affiche le nom du tournoi
            print(f"\nNom               : {tournament.name}")
            print(f"Lieu              : {tournament.place}")
            print(
                f"Dates             : {tournament.start_date} ‚Üí {tournament.end_date}"
            )
            print(f"Description       : {tournament.description}")
            print(f"Nombre de rounds  : {tournament.total_rounds}")
            print(f"Statut            : {tournament.status}\n")

    # ------- Affichage des joueurs d‚Äôun tournoi s√©lectionn√© -------
    def show_tournament_players(self):
        """
        Affiche la liste des joueurs d'un tournoi s√©lectionn√©.
        √âtapes :
        1. Affiche un titre pour guider l'utilisateur
        2. Demande √† l'utilisateur de choisir un tournoi
        3. Affiche la liste des joueurs du tournoi (tri√©s par nom et pr√©nom)
        4. Propose un export des donn√©es affich√©es
        """
        # 1Ô∏è‚É£ Affiche un titre pour guider l'utilisateur
        print("\n=== S√©lectionner un tournoi pour afficher les joueurs ===")

        # 2Ô∏è‚É£ Demande √† l'utilisateur de choisir un tournoi
        tournament = self._pick_tournament("afficher joueurs")
        if not tournament:  # üÖ∞ Annule si aucun tournoi n'est s√©lectionn√©
            return

        # 3Ô∏è‚É£ Affiche le titre de la liste des joueurs pour le tournoi choisi
        print(f"\n--- Joueurs du tournoi {tournament.name} ---")

        # 4Ô∏è‚É£ Trie la liste des joueurs par NOM puis pr√©nom
        order = sorted(tournament.players, key=lambda p: (p.last_name, p.first_name))

        # 5Ô∏è‚É£ Affiche les joueurs via la vue console
        ConsoleView.show_players(order)

        # 6Ô∏è‚É£ Pr√©pare les donn√©es pour une exportation √©ventuelle
        print("\n--- Exportation ---")
        rows = [[p.last_name, p.first_name, p.national_id] for p in order]
        headers = ["Nom", "Pr√©nom", "ID"]

        # 7Ô∏è‚É£ Propose l'export avec un nom de fichier bas√© sur le tournoi
        self._ask_export(rows, headers, f"joueurs_{tournament.name}")

    # ------- Affichage de tous les rounds et matchs d‚Äôun tournoi -------
    def show_all_rounds_and_matches(self):
        """
        Affiche tous les rounds et matchs d'un tournoi s√©lectionn√©.
        √âtapes :
        1. Demande √† l'utilisateur de choisir un tournoi
        2. Affiche les rounds et leurs matchs avec les scores
        3. Pr√©pare les donn√©es pour une exportation √©ventuelle
        """
        # 1Ô∏è‚É£ Affiche un titre pour guider l'utilisateur
        print("\n=== S√©lectionner un tournoi pour afficher les rounds et matches ===")

        # 2Ô∏è‚É£ Demande √† l'utilisateur de choisir un tournoi
        tournament = self._pick_tournament("afficher rounds & matches")
        if not tournament or not tournament.rounds:
            print("Aucun round disponible.")
            return

        # 3Ô∏è‚É£ Affiche tous les rounds et les matchs associ√©s
        for idx, rnd in enumerate(tournament.rounds, 1):
            print(f"\nü•ä Round {idx} :")
            for m in rnd.matches:
                p1, p2 = m.players
                s1, s2 = m.scores
                print(
                    f"{p1.last_name} {p1.first_name}[{p1.national_id}] "
                    f"{s1} - {s2} {p2.last_name} {p2.first_name}[{p2.national_id}]"
                )
        print()

        # 4Ô∏è‚É£ Pr√©pare les donn√©es sous forme tabulaire pour un export
        rows = []
        for idx, rnd in enumerate(tournament.rounds, 1):
            for m in rnd.matches:
                p1, p2 = m.players
                s1, s2 = m.scores
                rows.append(
                    [
                        f"Round {idx}",
                        f"{p1.last_name} {p1.first_name}",
                        f"{p2.last_name} {p2.first_name}",
                        s1,
                        s2,
                    ]
                )

        # 5Ô∏è‚É£ D√©finition des en-t√™tes et du nom de fichier d'export
        headers = ["Round", "Joueur 1", "Joueur 2", "Score 1", "Score 2"]
        name = f"rounds_{tournament.name.lower().replace(' ', '_')}"

        # 6Ô∏è‚É£ Propose un export des donn√©es (CSV, JSON, etc.)
        self._ask_export(rows, headers, name)

    # -----------------------
    #   EXPORT (CSV ou HTML)
    # -----------------------

    # ------- Exportation des donn√©es (CSV ou HTML) -------
    def _export(self, rows, headers, filename, fmt="csv"):
        """
        Exporte des donn√©es dans un fichier au format CSV ou HTML.
        Param√®tres :
        - rows     : liste de listes, chaque sous-liste repr√©sente une ligne
        - headers  : liste des noms de colonnes
        - filename : nom du fichier (sans extension)
        - fmt      : format d'export, "csv" ou autre (HTML par d√©faut)
        √âtapes :
        1. D√©termine le chemin du fichier
        2. Si CSV ‚Üí √©crit les donn√©es en CSV
        3. Sinon ‚Üí √©crit les donn√©es dans un tableau HTML
        4. Affiche un message de confirmation avec le chemin complet
        """
        # 1Ô∏è‚É£ V√©rifie que le dossier d'export existe, sinon le cr√©e
        create_export_directory()

        # 2Ô∏è‚É£ Construit le chemin complet du fichier d'export
        path = EXPORT_DIR / f"{filename}.{fmt}"

        # 3Ô∏è‚É£ Si le format demand√© est CSV
        if fmt == "csv":
            # üÖ∞ Ouvre le fichier en √©criture texte avec UTF-8
            with path.open("w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                # üÖ± √âcrit la ligne d'en-t√™tes
                writer.writerow(headers)
                # üÖ≤ √âcrit toutes les lignes de donn√©es
                writer.writerows(rows)

        else:
            # 4Ô∏è‚É£ Si le format n'est pas CSV ‚Üí export HTML
            with path.open("w", encoding="utf-8") as f:
                # üÖ∞ D√©but du tableau HTML avec en-t√™tes
                f.write("<table border='1'>\n<tr>")
                for h in headers:
                    f.write(f"<th>{h}</th>")
                f.write("</tr>\n")

                # üÖ± Ajoute les lignes de donn√©es
                for row in rows:
                    cells = "".join(f"<td>{c}</td>" for c in row)
                    f.write(f"<tr>{cells}</tr>\n")

                # üÖ≤ Fin du tableau
                f.write("</table>")

        # 5Ô∏è‚É£ Affiche un message confirmant la cr√©ation du fichier
        print(f"‚úì Export√© dans : {path.resolve()}")

    # ------- Demande et ex√©cution d'un export de rapport -------
    def _ask_export(self, rows, headers, default_name):
        """
        Propose √† l'utilisateur d'exporter un rapport et lance l'export si valid√©.
        Param√®tres :
        - rows         : liste de lignes (liste de listes) √† exporter
        - headers      : liste des noms de colonnes
        - default_name : nom de fichier sans extension
        √âtapes :
        1. Demande si l'utilisateur souhaite exporter le rapport
        2. Demande le format d'export (CSV ou HTML)
        3. Valide le format (CSV par d√©faut si invalide)
        4. Lance l'export avec la m√©thode _export
        """
        # 1Ô∏è‚É£ Demande si l'utilisateur souhaite exporter
        if input("\nExporter ce rapport ? (o/N) ").lower() == "o":

            # 2Ô∏è‚É£ Demande le format d'export
            fmt = input("Format csv ou html ? ").lower()

            # 3Ô∏è‚É£ V√©rifie que le format est valide (sinon CSV par d√©faut)
            if fmt not in ("csv", "html"):
                fmt = "csv"

            # 4Ô∏è‚É£ Lance l'export avec les param√®tres fournis
            self._export(rows, headers, default_name, fmt)
