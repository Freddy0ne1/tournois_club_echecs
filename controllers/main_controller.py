"""controllers/main_controller.py
Contr√¥leur principal pour d√©marrer l'application.
"""

from models.player import Player

from controllers.tournament_management import TournamentManagement
from controllers.tournament_players import TournamentPlayers
from controllers.player_controller import PlayerController
from controllers.tournament_reports import TournamentReports
from controllers.tournament_rounds import TournamentRound
from views.console_view import ConsoleView
from .tournament_controller_base import TournamentControllerBase


class MainController:
    """
    Contr√¥leur principal de l'application.
    R√¥le :
      - Point d'entr√©e de l'application
      - Initialise les diff√©rents sous-contr√¥leurs (joueurs, tournois)
      - Fournit la boucle principale et la navigation dans les menus
    """

    def __init__(self):
        """
        Initialise le contr√¥leur principal.
        √âtapes :
        1. Instancie le contr√¥leur des joueurs
        2. Instancie le contr√¥leur des tournois
        3. Recharge les joueurs existants depuis players.json
        """
        # 1Ô∏è‚É£ Cr√©e le contr√¥leur d√©di√© aux joueurs
        self.player_ctrl = PlayerController()

        # 2Ô∏è‚É£ Cr√©e le contr√¥leur d√©di√© aux tournois
        self.tour_ctrl = TournamentManagement()
        self.tour_ctrl2 = TournamentReports()
        self.tour_ctrl3 = TournamentPlayers()
        self.tour_ctrl4 = TournamentRound()
        self.tour_ctrl5 = ConsoleView()
        self.tour_ctrl_base = TournamentControllerBase()

        # 3Ô∏è‚É£ Recharge les joueurs sauvegard√©s pr√©c√©demment
        Player.load_all()

    # -----------------------
    #   M√âTHODES D'AIDE
    # -----------------------

    # ------- Affichage d‚Äôun menu num√©rot√© et lecture du choix utilisateur -------
    def _show_menu(self, title, options):
        """
        Affiche un menu num√©rot√© et lit le choix de l'utilisateur¬∑rice.
        Param√®tres :
        - title   : titre du menu (str)
        - options : liste d'options (list de str)
        √âtapes :
        1. Affiche le titre du menu
        2. Affiche chaque option avec un num√©ro
        3. Demande une saisie num√©rique valide correspondant √† une option
        4. Retourne le num√©ro choisi
        """
        # 1Ô∏è‚É£ Affiche l'en‚Äët√™te avec le titre du menu
        print(f"\n=== {title} ===\n")

        # 2Ô∏è‚É£ Parcourt la liste d'options et les affiche avec num√©rotation
        for idx, text in enumerate(options, 1):
            print(f"{idx}. {text}")

        # 3Ô∏è‚É£ Boucle de saisie pour obtenir un choix valide
        while True:
            # üÖ∞ Invite l'utilisateur √† saisir un num√©ro
            val = input("\nVotre choix : ").strip()

            # üÖ± V√©rifie que la saisie est bien un nombre
            if val.isdigit():
                num = int(val)

                # üÖ≤ V√©rifie que le nombre correspond √† une option disponible
                if 1 <= num <= len(options):
                    return num  # Retourne le choix valid√©

            # üÖ≥ Si la saisie est invalide, affiche un message d'erreur et redemande
            print(f"‚ùå Option invalide. Entrez un nombre entre 1 et {len(options)}.")

    # -----------------------
    #   MENU PRINCIPAL
    # -----------------------

    # ------- Boucle principale et navigation dans les menus -------
    def run(self):
        """
        Boucle principale de l'application avec le menu racine.
        √âtapes :
        1. D√©finit les actions possibles et leurs options
        2. Affiche le menu principal
        3. Redirige vers le sous-menu choisi
        4. Quitte l'application si l'utilisateur s√©lectionne 'Quitter'
        """
        # 1Ô∏è‚É£ Dictionnaire reliant les num√©ros aux m√©thodes correspondantes
        actions = {
            1: self._player_menu,
            2: self._tournament_menu,
            3: self._reports_menu,
        }

        # 2Ô∏è‚É£ Liste des options affich√©es dans le menu principal
        options = [
            "Param√®tres joueurs",
            "Param√®tres tournoi",
            "Rapports",
            "Quitter",
        ]

        # 3Ô∏è‚É£ Boucle infinie jusqu'√† ce que l'utilisateur choisisse de quitter
        while True:
            # üÖ∞ Affiche le menu et r√©cup√®re le choix de l'utilisateur
            choice = self._show_menu("Menu Principal", options)

            # üÖ± Si l'utilisateur choisit de quitter, on sort de la boucle
            if choice == 4:
                print("\nAu revoir !")
                break

            # üÖ≤ Ex√©cute l'action correspondant au choix si elle existe
            action = actions.get(choice)
            if action:
                action()

    # -----------------------
    #   MENU JOUEURS
    # -----------------------

    def _player_menu(self):
        """
        Menu d√©di√© √† la gestion des joueurs.
        √âtapes :
        1. D√©finit les actions disponibles : cr√©ation, modification, suppression,
            recherche et affichage des joueurs.
        2. Affiche les options et lit le choix de l'utilisateur¬∑rice.
        3. Ex√©cute l'action choisie jusqu'√† ce que 'Retour' soit s√©lectionn√©.
        """

        # 1Ô∏è‚É£ Action sp√©ciale pour modification : met √† jour aussi les r√©f√©rences dans les tournois
        def modify_and_update():
            updated = self.player_ctrl.modify_player()
            if updated:
                # Si un joueur est modifi√©, on met √† jour toutes ses occurrences dans les tournois
                self.tour_ctrl_base.update_player_references(updated)

        # 2Ô∏è‚É£ Dictionnaire des actions associ√©es aux num√©ros de menu
        actions = {
            1: self.player_ctrl.create_player,
            2: modify_and_update,
            3: self.player_ctrl.delete_player,
            4: self.player_ctrl.search_player,
            5: self.player_ctrl.list_players,
        }

        # 3Ô∏è‚É£ Liste des options affich√©es √† l'utilisateur
        options = [
            "Cr√©er joueur",
            "Modifier joueur",
            "Supprimer joueur",
            "Rechercher joueur",
            "Lister joueurs",
            "Retour",
        ]

        # 4Ô∏è‚É£ Boucle d'affichage et de gestion des choix
        while True:
            # üÖ∞ Affiche le menu des joueurs
            choice = self._show_menu("Menu Joueurs", options)

            # üÖ± Option 'Retour' ‚Üí sortir de la boucle
            if choice == 6:
                break

            # üÖ≤ R√©cup√®re et ex√©cute l'action associ√©e au choix
            action = actions.get(choice)
            if action:
                action()

    # -----------------------
    #   MENU TOURNOIS
    # -----------------------

    def _tournament_menu(self):
        """
        Menu d√©di√© √† la gestion des tournois.
        √âtapes :
        1. D√©finit les actions disponibles pour la gestion des tournois :
            cr√©ation, modification, suppression, ajout/retrait de joueurs,
            d√©marrage, saisie des scores, rounds et affichage du classement.
        2. Affiche les options et lit le choix de l'utilisateur¬∑rice.
        3. Ex√©cute l'action choisie jusqu'√† ce que 'Retour' soit s√©lectionn√©.
        """
        # 1Ô∏è‚É£ Dictionnaire associant chaque num√©ro d'option √† une m√©thode du contr√¥leur de tournois
        actions = {
            1: self.tour_ctrl.create_tournament,
            2: self.tour_ctrl.modify_tournament,
            3: self.tour_ctrl.delete_tournament,
            4: self.tour_ctrl.list_tournaments,
            5: self.tour_ctrl3.manage_players_in_tournament,
            6: self.tour_ctrl4.start_tournament,
            7: self.tour_ctrl4.enter_scores_current_round,
            8: self.tour_ctrl4.start_next_round,
            9: self.tour_ctrl2.show_leaderboard,
        }

        # 2Ô∏è‚É£ Liste des options affich√©es dans le menu tournois
        options = [
            "Cr√©er un tournoi",
            "Modifier un tournoi",
            "Supprimer un tournoi",
            "Lister les tournois",
            "Ajouter/Retirer joueur(s) √† un tournoi",
            "D√©marrer un tournoi",
            "Saisir scores du round",
            "D√©marrer le round suivant",
            "Afficher le classement",
            "Retour",
        ]

        # 3Ô∏è‚É£ Boucle d'affichage et de gestion des choix
        while True:
            # üÖ∞ Affiche le menu des tournois et lit la saisie
            choice = self._show_menu("Menu Tournois", options)

            # üÖ± Si l'utilisateur choisit 'Retour', on sort de la boucle
            if choice == 10:
                break

            # üÖ≤ Recherche et ex√©cution de l'action associ√©e
            action = actions.get(choice)
            if action:
                action()

    # -----------------------
    #   MENU RAPPORTS
    # -----------------------

    def _reports_menu(self):
        """
        Menu d√©di√© √† la consultation des rapports et statistiques.
        √âtapes :
        1. D√©finit les actions disponibles : affichage des joueurs,
            liste des tournois, d√©tails d'un tournoi, joueurs d'un tournoi
            et affichage de tous les rounds et matches.
        2. Affiche les options et lit le choix de l'utilisateur¬∑rice.
        3. Ex√©cute l'action choisie jusqu'√† ce que 'Retour' soit s√©lectionn√©.
        """
        # 1Ô∏è‚É£ Dictionnaire des actions disponibles pour chaque option du menu Rapports
        actions = {
            1: self.tour_ctrl2.list_registered_players,
            2: self.tour_ctrl.list_tournaments,
            3: self.tour_ctrl2.show_tournament_header,
            4: self.tour_ctrl2.show_tournament_players,
            5: self.tour_ctrl2.show_all_rounds_and_matches,
        }

        # 2Ô∏è‚É£ Liste des options affich√©es dans le menu Rapports
        options = [
            "Liste de tous les joueurs (ordre alphab√©tique)",
            "Liste de tous les tournois",
            "Nom et dates d'un tournoi donn√©",
            "Joueurs d'un tournoi (ordre alphab√©tique)",
            "Tous les rounds + matches d'un tournoi",
            "Retour",
        ]

        # 3Ô∏è‚É£ Boucle de navigation dans le menu Rapports
        while True:
            # üÖ∞ Affiche le menu et lit le choix de l'utilisateur
            choice = self._show_menu("Menu Rapports", options)

            # üÖ± Si l'utilisateur choisit 'Retour', on sort de la boucle
            if choice == 6:
                break

            # üÖ≤ Recherche et ex√©cution de l'action correspondant au choix
            action = actions.get(choice)
            if action:
                action()
