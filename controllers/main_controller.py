"""controllers/main_controller.py
Contr√¥leur principal pour d√©marrer l'application.
"""

from controllers.player_controller import PlayerController
from controllers.tournament_controller import TournamentController
from models.player import Player


class MainController:
    """Contr√¥leur principal pour d√©marrer l'application."""

    def __init__(self):
        # 1Ô∏è‚É£ Instancie le contr√¥leur des joueurs
        self.player_ctrl = PlayerController()

        # 2Ô∏è‚É£ Instancie le contr√¥leur des tournois
        self.tour_ctrl = TournamentController()

        # 3Ô∏è‚É£ Recharge tous les joueurs existants depuis players.json
        Player.load_all()

    # -----------------------
    #   M√âTHODES D‚ÄôAIDE
    # -----------------------

    def _show_menu(self, title, options):
        """
        Affiche un menu num√©rot√© et retourne le choix valid√©.
        title   : titre du menu (str)
        options : liste de textes d'options (list de str)
        """
        # 1Ô∏è‚É£ Affiche un en‚Äët√™te clair avec le titre du menu
        print(f"\n=== {title} ===\n")

        # 2Ô∏è‚É£ Parcourt chaque option et l‚Äôaffiche num√©rot√©e
        for idx, text in enumerate(options, 1):
            print(f"{idx}. {text}")

        # 3Ô∏è‚É£ Boucle de validation de la saisie utilisateur¬∑rice
        while True:
            # üÖ∞ Invite √† saisir un nombre
            val = input("\nVotre choix : ").strip()
            # üÖ± V√©rifie que l‚Äôentr√©e est un entier
            if val.isdigit():
                num = int(val)
                # üÖ≤ V√©rifie que ce nombre correspond √† une option existante
                if 1 <= num <= len(options):
                    return num  # choix valide, on le retourne
            # üÖ≥ En cas d‚Äôentr√©e invalide, affiche un message d‚Äôerreur et redemande
            print(f"‚ùå Option invalide. Entrez un nombre entre 1 et {len(options)}.")

    # -----------------------
    #   MENU PRINCIPAL
    # -----------------------

    def run(self):
        """Boucle principale avec le menu racine."""

        # 1Ô∏è‚É£ Boucle infinie pour afficher le menu principal tant que
        # - l‚Äôutilisateur¬∑rice ne choisit pas de quitter
        while True:
            # 2Ô∏è‚É£ Affiche le menu principal et r√©cup√®re le choix (1 √† 4)
            choice = self._show_menu(
                "Menu Principal",
                [
                    "Param√®tres joueurs",
                    "Param√®tres tournoi",
                    "Rapports",
                    "Quitter",
                ],
            )

            # 3Ô∏è‚É£ Redirige vers le sous‚Äëmenu ¬´‚ÄØParam√®tres joueurs‚ÄØ¬ª
            if choice == 1:
                self._player_menu()

            # 4Ô∏è‚É£ Redirige vers le sous‚Äëmenu ¬´‚ÄØParam√®tres tournoi‚ÄØ¬ª
            elif choice == 2:
                self._tournament_menu()

            # 5Ô∏è‚É£ Redirige vers le sous‚Äëmenu ¬´‚ÄØRapports‚ÄØ¬ª
            elif choice == 3:
                self._reports_menu()

            # 6Ô∏è‚É£ Option ¬´‚ÄØQuitter‚ÄØ¬ª ou toute autre saisie (4)
            else:
                print("\nAu revoir !")
                break  # Sortie de la boucle et fin de l‚Äôapplication

    # -----------------------
    #   MENU JOUEURS
    # -----------------------

    def _player_menu(self):
        """Menu pour g√©rer les joueurs."""

        # 1Ô∏è‚É£ Boucle principale du menu joueurs : reste actif jusqu‚Äô√† ‚ÄúRetour‚Äù
        while True:
            # 2Ô∏è‚É£ Affiche le menu des op√©rations sur les joueurs et r√©cup√®re le choix
            choice = self._show_menu(
                "Menu Joueurs",
                [
                    "Cr√©er joueur",
                    "Modifier joueur",
                    "Supprimer joueur",
                    "Rechercher joueur",
                    "Lister joueurs",
                    "Retour",
                ],
            )

            # 3Ô∏è‚É£ Si choix ‚ÄúCr√©er joueur‚Äù, on appelle la cr√©ation
            if choice == 1:
                self.player_ctrl.create_player()

            # 4Ô∏è‚É£ Si choix ‚ÄúModifier joueur‚Äù, on modifie et on met √† jour les r√©f√©rences
            elif choice == 2:
                updated = self.player_ctrl.modify_player()
                if updated:
                    # Met √† jour toute r√©f√©rence au Player modifi√© dans les tournois
                    self.tour_ctrl.update_player_references(updated)

            # 5Ô∏è‚É£ Si choix ‚ÄúSupprimer joueur‚Äù, on appelle la suppression
            elif choice == 3:
                self.player_ctrl.delete_player()

            # 6Ô∏è‚É£ Si choix ‚ÄúRechercher joueur‚Äù, on lance la recherche
            elif choice == 4:
                self.player_ctrl.search_player()

            # 7Ô∏è‚É£ Si choix ‚ÄúLister joueurs‚Äù, on affiche la liste compl√®te
            elif choice == 5:
                self.player_ctrl.list_players()

            # 8Ô∏è‚É£ Si choix ‚ÄúRetour‚Äù (ou toute autre valeur), on sort du menu
            else:  # choice == 6
                break

    # -----------------------
    #   MENU TOURNOIS
    # -----------------------

    def _tournament_menu(self):
        """Menu pour g√©rer les tournois."""

        # 1Ô∏è‚É£ Boucle principale du menu tournois :
        # - active tant que l‚Äôutilisateur¬∑rice ne choisit pas ‚ÄúRetour‚Äù
        while True:
            # 2Ô∏è‚É£ Affiche le menu des op√©rations disponibles et r√©cup√®re le choix (1‚Äì10)
            choice = self._show_menu(
                "Menu Tournois",
                [
                    "Cr√©er un tournoi",
                    "Modifier un tournoi",
                    "Supprimer un tournoi",
                    "Lister les tournois",
                    "Ajouter/Retirer joueur(s) √† un tournoi",
                    "D√©marrer un tournoi",
                    "Saisir scores du round",
                    "D√©marrer le round suivant",
                    "Afficher le classement",
                    "Retour",
                ],
            )

            # 3Ô∏è‚É£ Redirection vers la cr√©ation de tournoi
            if choice == 1:
                self.tour_ctrl.create_tournament()

            # 4Ô∏è‚É£ Redirection vers la modification d‚Äôun tournoi
            elif choice == 2:
                self.tour_ctrl.modify_tournament()

            # 5Ô∏è‚É£ Suppression d‚Äôun tournoi
            elif choice == 3:
                self.tour_ctrl.delete_tournament()

            # 6Ô∏è‚É£ Affichage de la liste des tournois
            elif choice == 4:
                self.tour_ctrl.list_tournaments()

            # 7Ô∏è‚É£ Gestion des joueurs dans un tournoi (ajout/retrait)
            elif choice == 5:
                self.tour_ctrl.manage_players_in_tournament()

            # 8Ô∏è‚É£ D√©marrage d‚Äôun tournoi
            elif choice == 6:
                self.tour_ctrl.start_tournament()

            # 9Ô∏è‚É£ Saisie des scores du round en cours
            elif choice == 7:
                self.tour_ctrl.enter_scores_current_round()

            # üîü D√©marrage du round suivant
            elif choice == 8:
                self.tour_ctrl.start_next_round()

            # 1Ô∏è‚É£1Ô∏è‚É£ Affichage du classement du tournoi
            elif choice == 9:
                self.tour_ctrl.show_leaderboard()

            # 1Ô∏è‚É£2Ô∏è‚É£ Retour au menu principal
            else:  # choice == 10
                break

    # -----------------------
    #   MENU RAPPORTS
    # -----------------------

    def _reports_menu(self):
        """Menu pour afficher les rapports."""

        # 1Ô∏è‚É£ Boucle principale du menu ¬´‚ÄØRapports‚ÄØ¬ª‚ÄØ:
        # - active tant que l‚Äôutilisateur¬∑rice ne choisit pas ‚ÄúRetour‚Äù
        while True:
            # 2Ô∏è‚É£ Affiche les options de rapports disponibles et r√©cup√®re le choix
            choice = self._show_menu(
                "Menu Rapports",
                [
                    "Liste de tous les joueurs (ordre alphab√©tique)",
                    "Liste de tous les tournois",
                    "Nom et dates d'un tournoi donn√©",
                    "Joueurs d'un tournoi (ordre alphab√©tique)",
                    "Tous les rounds + matches d'un tournoi",
                    "Retour",
                ],
            )

            # 3Ô∏è‚É£ Si choix ‚Äú1‚Äù, affiche tous les joueurs inscrits (ordre alphab√©tique)
            if choice == 1:
                self.tour_ctrl.list_registered_players()

            # 4Ô∏è‚É£ Si choix ‚Äú2‚Äù, affiche la liste de tous les tournois
            elif choice == 2:
                self.tour_ctrl.list_tournaments()

            # 5Ô∏è‚É£ Si choix ‚Äú3‚Äù, affiche le nom et les dates d‚Äôun tournoi choisi
            elif choice == 3:
                self.tour_ctrl.show_tournament_header()

            # 6Ô∏è‚É£ Si choix ‚Äú4‚Äù, affiche les joueurs d‚Äôun tournoi s√©lectionn√© (ordre alphab√©tique)
            elif choice == 4:
                self.tour_ctrl.show_tournament_players()

            # 7Ô∏è‚É£ Si choix ‚Äú5‚Äù, affiche tous les rounds et matches d‚Äôun tournoi
            elif choice == 5:
                self.tour_ctrl.show_all_rounds_and_matches()

            # 8Ô∏è‚É£ Si choix ‚Äú6‚Äù ou autre (Retour), quitte le menu et revient au menu principal
            else:  # choice == 6
                break
