"""
views/console_view.py
Vue console pour l'application Tournois Club √âchecs.

Ce module g√®re exclusivement l'affichage dans le terminal :
- Menus interactifs
- Listes des joueurs et des tournois
- Classements et rounds
Aucune logique m√©tier ni traitement des donn√©es n'est effectu√©e ici.
"""


class ConsoleView:
    """
    Vue console de l'application.

    R√¥le :
      - Afficher les informations √† l'√©cran (menus, listes, classements)
      - Proposer des choix interactifs √† l'utilisateur
    Contraintes :
      - Ne contient aucune logique m√©tier
      - Ne modifie pas les donn√©es, se contente de pr√©senter les r√©sultats
    """

    # -----------------------
    #   AFFICHAGE DU MENU
    # -----------------------

    @staticmethod
    def menu(title, options, show_back=True):
        """
        Affiche un menu interactif num√©rot√© et retourne le choix s√©lectionn√©.

        Sp√©cificit√© :
        - L'option 0 est automatiquement ajout√©e pour "Retour"
          (inutile de l'ajouter dans la liste pass√©e en param√®tre).

        Param√®tres :
        - title (str)   : le titre du menu √† afficher.
        - options (list): liste de cha√Ænes repr√©sentant les diff√©rentes options.

        Retour :
        - int : num√©ro de l'option choisie par l'utilisateur (0 = Retour).
        """
        # 1Ô∏è‚É£ Affiche un en-t√™te clair pour pr√©senter le menu
        print(f"\n=== {title} ===\n")

        # 2Ô∏è‚É£ Affiche les autres options avec une num√©rotation √† partir de 1
        for i, option in enumerate(options, 1):
            print(f"{i}. {option}")

        # 3Ô∏è‚É£ Affiche toujours l'option 0 pour revenir en arri√®re
        if show_back:
            print("0. Retour")

        # 4Ô∏è‚É£ Boucle jusqu'√† obtenir une saisie valide
        while True:
            # üÖ∞ Demande une saisie utilisateur et supprime les espaces inutiles
            choice = input("\nVotre choix : ").strip()

            # üÖ± V√©rifie si la saisie est bien un nombre entier
            if choice.isdigit():
                num = int(choice)
                # üÖ≤ Autorise la valeur 0
                if 0 <= num <= len(options):
                    return num  # choix valide ‚Üí on retourne le num√©ro choisi

            # 5Ô∏è‚É£ En cas d'erreur (non nombre ou hors plage), on r√©affiche un message
            print(f"‚ùå Option invalide, entrez un nombre entre 0 et {len(options)}.")

    # -----------------------
    #   AFFICHAGE DES JOUEURS
    # -----------------------

    @staticmethod
    def show_players(players):
        """
        Affiche une liste de joueurs sous forme num√©rot√©e et tri√©e.

        Param√®tres :
        - players (list) : liste d'objets Player √† afficher.

        Affichage :
        - Chaque ligne contient :
            num√©ro. NOM Pr√©nom | Identifiant | Date de naissance
        """
        # 1Ô∏è‚É£ Affiche un titre clair avant la liste
        print("\n--- Liste des joueurs ---\n")

        # 2Ô∏è‚É£ Trie la liste re√ßue par ordre alphab√©tique
        #    - d'abord par le nom (last_name)
        #    - puis par le pr√©nom (first_name)
        players_sorted = sorted(players, key=lambda p: (p.last_name, p.first_name))

        # 3Ô∏è‚É£ Parcourt la liste tri√©e et affiche chaque joueur avec un num√©ro
        for idx, p in enumerate(players_sorted, 1):
            print(
                f"{idx}. {p.last_name} {p.first_name} | {p.national_id} | {p.birth_date}"
            )

    # -----------------------
    #   AFFICHAGE DES TOURNOIS
    # -----------------------

    @staticmethod
    def show_tournaments(tournaments):
        """
        Affiche une liste num√©rot√©e de tournois et leurs informations principales.

        Param√®tres :
        - tournaments (list) : liste d'objets Tournament √† afficher.

        Affichage :
        - Chaque ligne contient :
            num√©ro. Nom - Lieu - Date d√©but ‚Üí Date fin - Nb tours - Nb joueurs - Statut
        """
        # 1Ô∏è‚É£ Affiche un titre clair avant la liste
        print("\n--- Liste des tournois ---\n")

        # 2Ô∏è‚É£ Parcourt la liste des tournois et affiche les informations cl√©s pour chacun
        for idx, t in enumerate(tournaments, 1):
            print(
                f"{idx}. {t.name} - {t.place} - {t.start_date} ‚Üí {t.end_date} - "
                f"{t.total_rounds} tours - {len(t.players)} joueurs - statut : {t.status}"
            )

    # -----------------------
    #   AFFICHAGE DU CLASSEMENT
    # -----------------------

    @staticmethod
    def show_leaderboard(tournament):
        """
        Affiche le classement des joueurs pour un tournoi donn√©.

        Param√®tres :
        - tournament (Tournament) : tournoi dont on veut afficher le classement.

        Affichage :
        - Classement tri√© par points d√©croissants.
        - Chaque ligne contient :
            rang. NOM Pr√©nom - points pts
        """
        # 1Ô∏è‚É£ Affiche un titre avec le nom du tournoi
        print(f"\n=== Classement du tournoi : {tournament.name} ===")

        # 2Ô∏è‚É£ Trie les joueurs par nombre de points d√©croissant
        ordered = sorted(tournament.players, key=lambda p: p.points, reverse=True)

        # 3Ô∏è‚É£ Affiche le classement avec rang, nom complet et points
        for rank, p in enumerate(ordered, 1):
            print(f"{rank}. {p.last_name} {p.first_name} - {p.points} pts")

    # -----------------------
    #   AFFICHAGE D'UN ROUND
    # -----------------------

    @staticmethod
    def show_round(round_obj):
        """
        Affiche les informations d'un round pr√©cis.

        Param√®tres :
        - round_obj (Round) : round √† afficher

        Affichage :
        - En-t√™te indiquant le nom du round, la date/heure de d√©but et
        la date/heure de fin (ou "en cours").
        - La liste des matchs du round avec le format :
            num√©ro. NOM1 Pr√©nom1 score1 - score2 NOM2 Pr√©nom2
        """
        # 1Ô∏è‚É£ D√©termine le statut du round : termin√© (end_time) ou en cours
        status = round_obj.end_time or "en cours"

        # 2Ô∏è‚É£ Affiche l'en‚Äët√™te du round avec sa p√©riode
        print(f"\n--- {round_obj.name} : {round_obj.start_time} ‚Üí {status} ---")

        # 3Ô∏è‚É£ Parcourt et affiche chaque match de ce round
        for idx, m in enumerate(round_obj.matches, 1):
            p1, p2 = m.players
            s1, s2 = m.scores
            print(
                f"{idx}. {p1.last_name} {p1.first_name} {s1} - {s2} {p2.last_name} {p2.first_name}"
            )
